1.操作系统的基本特征
并发：并发是指宏观上在一段时间内能同时运行多个程序，而并行则指同一时刻能运行多个指令。
操作系统通过引入进程和线程，使得程序能够并发运行。并行需要硬件支持。

共享：指系统中的资源可以被多个并发进程共同使用。
有两种共享方式：互斥共享和同时共享。互斥共享的资源称为临界资源。

虚拟：虚拟技术把一个物理实体转换为多个逻辑实体。
主要有两种虚拟技术：时分复用技术和空（空间）分复用技术。

异步：异步指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。

2.操作系统的基本功能
进程管理：进程控制、进程同步、进程通信、死锁处理、处理机调度等。
内存管理：内存分配、地址映射、内存保护与共享、虚拟内存等。
文件管理：文件存储空间的管理、目录管理、文件读写管理和保护等。
设备管理：缓冲管理、设备分配、设备处理、虛拟设备等。

3.进程
进程是资源分配的基本单位。
进程控制块PCB：描述进程的基本信息和运行状态，创建进程和撤销进程都是指对PCB的操作。 

进程状态以及转换。

4.线程
线程是独立调度的基本单位。一个进程中可以有多个线程，它们共享进程资源。

进程和线程的区别：
1.进程是资源分配的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。
2.线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。
3.创建和撤销进程，和在进行进程切换时，开销大于线程。
4.线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助IPC。

5.进程调度
不同环境的调度算法目标不同。

批处理系统：没有太多的用户操作，在该系统中，调度算法目标是保证吞吐量和周转时间。
1.先来先服务FCFS：非抢占式的调度算法，按照请求的顺序进行调度。有利于长作业，但不利于短作业。
2.短作业优先SJF：非抢占式的调度算法，按估计运行时间最短的顺序进行调度。如果一直有短作业到来，那么长作业永远得不到调度。
3.最短剩余时间优先SRTN：短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。如果新的进程需要的时间更少，则挂起当前进程，运行新的进程。否则新的进程等待。

交互式系统：有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。
1.时间片轮转：将所有就绪进程按FCFS的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。
时间片轮转算法的效率和时间片的大小有很大关系。
2.优先级调度：为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。
3.多级反馈队列：设置了多个队列，每个队列时间片大小都不同，看成是时间片轮转调度算法和优先级调度算法的结合。

6.进程同步
临界区：对临界资源进行访问的那段代码称为临界区。为了互斥访问临界资源，每个进程在进入临界区之前，需要先进行检查。
同步：多个进程按一定顺序执行；互斥：多个进程在同一时刻只有一个进程能进入临界区。
管程：把控制的代码独立出来。管程有一个重要特性：在一个时刻只能有一个进程使用管程。

信号量Semaphore：
down和up操作，也就是常见的P和V操作。down和up操作设计成原语，不可分割，通常的做法是在执行这些操作的时候屏蔽中断。
如果信号量的取值只能为0或者1，那么就成为了互斥量Mutex，0表示临界区已经加锁，1表示临界区解锁。
用信号量实现生产者-消费者问题：不能先对缓冲区进行加锁，再测试信号量。

经典同步问题：
生产者和消费者问题。
读者-写者问题：允许多个进程同时对数据进行读操作，但是不允许读和写以及写和写操作同时发生。
哲学家进餐问题。

7.进程通信












进程调度：先来先服务，短作业优先，优先级调度，高响应比优先，时间片轮转，多级反馈队列

进程同步：生产者消费者，读者写者，哲学家进餐，吸烟者

进程通信：PV操作（低级），共享存储，消息传递，管道通信（高级）

死锁必要条件：互斥，不剥夺，请求和保持，循环等待  
解决：预防，避免（银行家算法），检测和解除

虚拟内存：在逻辑上扩充内存 
请求分页：请求调页和页面置换，内外存调动页面，腾出内存空间
页面置换：最佳置换，先进先出，最近最久未使用（LRU），时钟

分页与分段的区别：
分页为了系统管理内存，分段满足用户需求；
页的大小固定，段的长度却不固定；
分页地址空间是一维线性的，分段地址空间是二维的，即需给出段名，又需给出段内地址。

静态链接的不足：生成的可执行文件体积较大，包含相同的公共代码，造成浪费内存增加页面交换。
动态链接的特点：更加节省内存并减少页面交换，提高了可维护性和可扩展性，适用于不同编程语言，适用于大规模的软件开发。
