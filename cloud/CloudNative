1.概述
云原生计算基金会 CNCF 给出了云原生应用的三大特征：
容器化封装：以容器为基础，提高整体开发水平，形成代码和组件重用，简化云原生应用程序的维护。在容器中运行应用程序和进程，并作为应用程序部署的独立单元，实现高水平资源隔离。
动态管理：通过集中式的编排调度系统来动态的管理和调度。
面向微服务：明确服务间的依赖，互相解耦。

云原生由微服务架构，DevOps 和以容器为代表的敏捷基础架构组成。

12-Factors 由公有云 PaaS 的先驱 Heroku 于 2012 年提出。

docker 容器化。

Kubernetes 让容器应用进入大规模工业生产。服务编排。
Kubernetes 出身于 Google，借鉴 Borg 系统的理念，通过极其简易的安装，以及灵活的网络层对接方式，提供一站式的服务。
在单机上运行容器，无法发挥它的最大效能，只有形成集群，才能最大程度发挥容器的良好隔离、资源分配与编排管理的优势。

微服务架构 Micro-Service Archeticture 旨在通过将功能模块分解到各个独立的子系统中以实现解耦，它并没有一成不变的规定，而是需要根据业务来做设计。微服务架构是对 SOA 的传承。 
微服务架构中，每个微服务模块只是对简单、独立、明确的任务进行处理，通过 REST API 返回处理结果给外部。在微服务推广实践角度来看，微服务将整个系统进行拆分，拆分成更小的粒度，保持这些服务独立运行，应用容器化技术将微服务独立运行在容器中。
微服务使用各个子服务控制模块的思想代替总线。不同的业务要求，服务控制模块至少包含服务的发布、注册、路由、代理功能。
架构演化从单体式应用到分布式，再从分布式架构到云原生架构，微服务在其中有着不可或缺的角色。微服务带给我们很多开发和部署上的灵活性和技术多样性，但是也增加了服务调用的开销、分布式系事务、调试与服务治理方面的难题。
微服务架构中所必须的组件：服务发现与注册、熔断机制、路由、全局锁、中心配置管理、控制总线、决策竞选、分布式会话和集群状态管理等基础组件。

Spring Cloud 方法是试图解决在 JVM 中的微服务架构要点，而 Kubernetes 方法是试图让问题消失，为开发者在平台层解决。
