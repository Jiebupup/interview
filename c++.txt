1.封装、继承和多态

2.虚函数
由于编写代码的时候并不能确定被调用的是基类的函数还是哪个派生类的函数，所以被成为“虚”函数。
虚函数的作用是允许在派生类中重新定义与基类同名的函数，并且可以通过基类指针或引用来访问基类和派生类中的同名函数。

纯虚函数是在基类中声明的虚函数，它在基类中没有定义，但要求任何派生类都要定义自己的实现方法。含有虚函数的类成为抽象类，不能生成对象。

虚析构函数是为了解决这样的一个问题：基类的指针指向派生类对象，并用基类的指针删除派生类对象，防止内存泄漏。

虚函数表实质是一个指针数组，里面存的是虚函数的函数指针。包含虚函数的类才会有虚函数表， 同属于一个类的对象共享虚函数表， 但是有各自的_vptr。

3.引用和指针的区别

4.深拷贝和浅拷贝（值拷贝和位拷贝）
浅拷贝： 将原对象或原数组的引用直接赋给新对象，新数组，新对象／数组只是原对象的一个引用
深拷贝： 创建一个新的对象和数组，将原对象的各项属性的“值”（数组的所有元素）拷贝过来，是“值”而不是“引用”

5.拷贝构造函数和赋值构造函数
拷贝构造函数：用基于同一类的一个对象构造和初始化另一个对象。
A a
A b(a);
A b=a; 
b对象是不存在的，是用a 对象来构造和初始化b的

赋值构造函数：一个类的对象向该类的另一个对象赋值
A a;
A b;
b=a; 
这里a,b对象是已经存在的，是用a 对象来赋值给b

6.智能指针
方便管理堆内存

7.内联函数
内联函数的目的是为了减少函数调用时间。它是把内联函数的函数体在编译器预处理的时候替换到函数调用处，这样代码运行到这里时候就不需要花时间去调用函数。
有了内联函数，就能像调用一个函数那样方便地重复使用一段代码。

inline是在编译器将函数类容替换到函数调用处，是静态编译的。而虚函数是动态调用的，因此虚函数不能定义为内联函数。

内联函数与宏定义区别：
  （1）内联函数在编译时展开，宏在预编译时展开；
  （2）内联函数直接嵌入到目标代码中，宏是简单的做文本替换；
  （3）内联函数有类型检测、语法判断等功能，而宏没有；
  （4）inline函数是函数，宏不是；
  （5）宏定义时要注意书写（参数要括起来）否则容易出现歧义，内联函数不会产生歧义；

8.堆和栈
栈内存：由程序自动向操作系统申请分配以及回收，速度快，使用方便，但程序员无法控制。若分配失败，则提示栈溢出错误。
存储内容:局部变量

堆内存：程序员向操作系统申请一块内存，当系统收到程序的申请时，会遍历一个记录空闲内存地址的链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。分配的速度较慢，地址不连续，容易碎片化。此外，由程序员申请，同时也必须由程序员负责销毁，否则则导致内存泄露。
存储内容:变量

9.编译过程
分为编译+汇编，分别生成.s和.o文件。
编译是读取源程序（字符流），对之进行词法和语法的分析，将高级语言指令转换为功能等效的汇编代码,再转换为机器代码。
编译阶段分为预处理阶段和编译、优化阶段。

10.c#委托
委托是一个类，它定义了方法的类型，使得可以将方法当作另一个方法的参数来进行传递。事件是一种特殊的委托。
特点：
    委托类似于 C++ 函数指针，但它们是类型安全的。
    委托允许将方法作为参数进行传递。
    委托可用于定义回调方法。
    委托可以链接在一起；例如，可以对一个事件调用多个方法。
    方法不必与委托签名完全匹配。

delegate、Action、Func、predicate

11.Dictionary
集合，Key/Value(键值对的形式来存放数据，查找元素的时间复杂度接近O(1)
Hash

12.迭代器的插入删除
序列式容器：insert会将指定对象插入指定迭代器之前的位置，并返回这个位置的迭代器，这个位置之后的元素都要后移；erase操作，函数会删除指定迭代器位置的元素，然后将后面的元素前移一位，erase返回指向被删除元素下一元素的迭代器。
关联式容器：插入和删除一个结点不会对其他结点造成影响。

13.模板
优点：
1. 灵活性, 可重用性和可扩展性;
2. 可以大大减少开发时间，模板可以把用同一个算法去适用于不同类型数据，在编译时确定具体的数据类型;	
3. 模版模拟多态要比C++类继承实现多态效率要高, 无虚函数, 无继承;

缺点：
1.模板的数据类型只能在编译时才能被确定；
2.所有用基于模板算法的实现必须包含在整个设计的.h头文件中, 当工程比较大的时候, 编译时间较长;
3.易读性比较不好，调试比较困难;

	
