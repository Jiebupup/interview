1.RPC
RPC(Remote Procedure Call Protocol)——远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。
RPC将原来的本地调用转变为调用远端的服务器上的方法

一个完整的RPC架构里面包含了四个核心的组件，分别是Client，Client Stub，Server以及Server Stub，这个Stub可以理解为存根。

RPC调用过程：
(1) 客户端（client）以本地调用方式（即以接口的方式）调用服务；
(2) 客户端存根（client stub）接收到调用后，负责将方法、参数等组装成能够进行网络传输的消息体（将消息体对象序列化为二进制）；
(3) 客户端通过sockets将消息发送到服务端；
(4) 服务端存根( server stub）收到消息后进行解码（将消息对象反序列化）；
(5) 服务端存根( server stub）根据解码结果调用本地的服务；
(6) 本地服务执行并将结果返回给服务端存根( server stub）；
(7) 服务端存根( server stub）将返回结果打包成消息（将结果消息对象序列化）；
(8) 服务端（server）通过sockets将消息发送到客户端；
(9) 客户端存根（client stub）接收到结果消息，并进行解码（将结果消息发序列化）；
(10) 客户端（client）得到最终结果。

RPC的目标是要把2、3、4、7、8、9这些步骤都封装起来。

2.微服务架构
描述了一种将软件应用程序设计为可独立部署的服务套件的特定方式。
微服务架构是一种将单应用程序作为一套小型服务开发的方法，每种应用程序都在其自己的进程中运行。这些服务是围绕业务功能构建的，可以通过全自动部署机制进行独立部署。

微服务架构一样会用到各种库，但这种架构会把软件给拆分成各种不同的服务来实现组件化。
分散治理
去中心化

3.CAP理论：分布式系统的三个指标
一致性(Consistency) ： 写操作之后的读操作，必须返回该值。
可用性(Availability) ： 只要收到用户的请求，服务器就必须给出回应。 
分区容错性(Partition tolerance) ： 即使出现单个组件无法可用,操作依然可以完成 。一般来说，分区容错无法避免。
只有CP和AP，C和A无法同时做到。

以「CAP」为基础的强一致性解决方案都会引入一个类似“协调器”的东西来作为全局事务的掌控者：
两阶段提交2PC
三阶段提交3PC
TCC通过运用本地事务代替了全局事务，使得可以不需要协调者的存在，避免了协调者的单点问题。3PC中协调者的另一个作用：故障恢复后的数据一致性。在TTC里通过事务日志来确保。
上面三种是主流的DTS（Distributed Transaction Service）框架，不管是3PC还是TCC，只要涉及到故障恢复或者重试机制，就要考虑「幂等性」。

4.BASE理论：对CAP定理进行进一步扩充
Basically Available（基本可用） 
Soft state（软状态） 
Eventually consistent（最终一致性） 
BASE理论是对CAP中的一致性和可用性进行一个权衡的结果，理论的核心思想就是：我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性

以「BASE」理论为基础的解决方案：
异步消息——本地消息表：将远程分布式事务拆分成一系列的本地事务，借助关系型数据库中的表即可实现。
异步消息——不支持事务的MQ：大部分的MQ都是不支持事务的
异步消息——支持事务的MQ：RockerMQ
Saga：将一个分布式事务拆分为多个本地事务，并且击鼓传花给下一个，不用阻塞本地事务等待响应。且允许嵌套至多一层子事务。除了最后一个参与者之外，都需要定义一个「回滚」接口，便于在遇到无法进行下去的情况下撤销之前上游系统的修改。当然这里的撤销除了Update还可以是冲抵类的操作。
Gossip协议：一般会用于数据复制、P2P拓扑构造、故障探测等。

基于「CAP」的解决方案都是在线的，而「Base」是允许离线的。前者需要一直进行，否则就失败。后者可以慢慢来。
