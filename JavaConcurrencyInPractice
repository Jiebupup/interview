1.线程安全性
当多个线程访问某个类时，这个类始终都能表现出正确的行为，那么就称这个类是线程安全的。

无状态对象一定是线程安全的：既不包含任何域，也不包含任何对其他类中域的引用。计算过程中的临时状态仅存在于线程栈上的局部变量中，并且只能由正在执行的线程访问。

竞态条件：由于不恰当的执行时序而出现不正确的结果。
某个计算的正确性取决于多个线程的交替执行时序，就会发生竞态条件。
最常见的竞态条件：先检查后执行，即通过一个可能失效的观测结果来决定下一步的动作。常见的先检查后执行：延迟初始化。

内置锁（或称监视锁）支持原子性：同步代码块。
内置锁是可重入的。
可以用锁来保护共享或可变状态变量。
通过同步来避免多个线程在同一时刻访问相同的数据。

2.对象的共享
重排序：

对于非volatile类型的long和double变量，JVM允许将64位的读操作或写操作分解为两个32位操作。为了安全性，需要用volatile关键字声明或用锁保护起来。
