1.渲染管线
3D 模型通过渲染管线来渲染到 2D 的屏幕上。渲染管线的流程是在 GPU 中进行的，它主要占有计算机的显存部分。渲染管线在这个过程中进行了顶点处理、面处理、光栅化、像素处理。

2.shader
可编程着色器 Shader。Shader 能让渲染的图形展示出多种视觉效果。
shader是插在渲染管道里面的程序，是GPU执行的，性能好。可控性强，可以控制到每个顶点，每个像素的着色。

四大渲染模式：Opaque（不透明），Cutout（镂空），Fade（隐现），Transparent（透明）。

3.UGUI NGUI
画布Canvas ，设置自适应，绘制模式 ，UI控件的布局，Rect Tool小工具，RectTransform组件 ，Anchors属性 

NGUI组件：Editor，Examples，Resources，Scripts

4.AssetBundle加载方式
AssetBundle是从unity项目中打包出来的资源文件。
要加载一个资源A，必须先去加载它的所有依赖资源。加载AssetBundleManifest，获取它依赖的所有资源。
分为从文件加载和从网络加载	

打包：资源的搜集，读取，调用BuildPipeline.BuildAssetBundle来进行打包：主资源，资源数组，路径，依赖，平台。

优点：热更新，动态更新游戏资源；压缩，灵活。

内存：在使用WWW加载Bundle时，会开辟一块内存，这块内存是Bundle文件解压之后的内存，这意味着这块内存很大，通过Bundle.Unload可以释放掉这块内存。
得到Bundle之后，我们用Bundle.Load来加载资源，这些资源会从Bundle的内存被复制出来，作为Asset放到内存中，这意味着，这块内存，也很大，Asset内存的释放，与Unity其他资源的释放机制一样，可以通过Resources.UnloadUnuseAsset来释放没有引用的资源，也可以通过Bundle.Unload(true)来强制释放Asset，这会导致所有引用到这个资源的对象丢失该资源

5.对象池
对象池是一种Unity经常用到的内存管理服务，它的作用在于可以减少创建每个对象的系统开销。
为了解决大量创建重复对象造成的内存损耗，我们采用对象池的方式来解决。

实现：SetActive true or false  

6.批处理
静态批处理和动态批处理
只有拥有相同材质的物体才可以进行批处理。

动态批处理操作是自动完成的，并不需要你进行额外的操作。批处理动态物体需要在每个顶点上进行一定的开销，所以动态批处理仅支持小于900顶点的网格物体。

相对而言，静态批处理操作允许引擎对任意大小的几何物体进行批处理操作来降低绘制调用（只要这些物体不移动，并且拥有相同的材质）。因此，静态批处理比动态批处理更加有效，你应该尽量地使用它，因为它需要更少的CPU开销。

7.Culing Mask Clipping Planes
通过cullingMask可以使得当前摄像机有选择性的渲染场景中的部分物体,按层（即GameObject.layer）有选择性的渲染场景中的物体。
用于来设定是否剔除处于某一层的对象。

裁剪平面，Near和Far指定了裁剪的区域范围，即在Near-Far范围之内的面将被裁剪掉，不进行渲染。

8.透视相机 正交相机
透视图有很强的立体空间的表现力而正交视图能准确表达物体在空间中的位置和状态

9.Sprite精灵和Texture纹理
Sprite 用在 Image 组件上,Texture用在Raw Image组件上。
Sprite 有图集的概念,需要把整个图集导入到内存中。texture没有图集的概念。
Sprite可以直接拖入场景，不可以直接拖入场景中。














































1.
