1.常用操作
快捷键：
Tab：命令和文件名补全
Ctrl+C：中断正在运行的程序
Ctrl+D：结束键盘输入EOF

求助：
--help：指令的基本用法与选项介绍。
man：将指令的具体信息显示出来。
info：与 man 类似，但是 info 将文档分成一个个页面，每个页面可以进行跳转。
doc：/usr/share/doc 存放着软件的一整套说明文件。

关机：
who：查看有没有其它用户在线。
sync：为了加快对磁盘文件的读写速度，位于内存中的文件数据不会立即同步到磁盘上，因此关机之前需要先进行 sync 同步操作。
shutdown
环境变量 PATH
sudo 允许一般用户使用 root 可执行的命令，不过只有在 /etc/sudoers 配置文件中添加的用户才能使用该指令。

2.文件
文件系统：Ext2
inode：一个文件占用一个 inode，记录文件的属性，同时记录此文件的内容所在的 block 编号；
block：记录文件的内容，文件太大时，会占用多个 block。
superblock：记录文件系统的整体信息，包括 inode 和 block 的总量、使用量、剩余量，以及文件系统的格式与相关信息等；
block bitmap：记录 block 是否被使用的位图。

对于 Ext2 文件系统，当要读取一个文件的内容时，先在 inode 中查找文件内容所在的所有 block，然后把所有 block 的内容读出来。
而对于 FAT 文件系统，它没有 inode，每个 block 中存储着下一个 block 的编号。

基本操作：
ls：列出文件或者目录的信息，目录的信息就是其中包含的文件。
cp、rm和mv：复制、删除和移动文件或目录
cat：取得文件内容
more：一页一页查看文件内容
head:只看文件的头几行
touch：修改文件时间或者建立新文件。
file:查看文件类型
which：命令查找，通过PATH变量来查找文件名
whereis、locate和find：文件名查找，whereis和locate到数据库文件去查找，而不实际查找文件系统；find直接查询文件系统。
修改权限chmod:rwx
连接文件ln

3.目录
Linux目录配置标准FHS：/bin,/dev...
目录树
绝对路径和相对路径

基本操作：
cd：更换当前目录
pwd：显示当前目录
mkdir和rmdir：创建和删除目录。
df和du：目录和磁盘的容量

4.磁盘
fdisk:磁盘分区
mkfs：文件系统格式化
fsck和badblocks：磁盘检验
mount：磁盘挂载
mknod：磁盘参数修改

BIOS：基本输入输出系统，是开机的时候计算机执行的第一个程序，知道可以开机的磁盘，并读取磁盘第一个扇区的主要开机记录（MBR），由MBR执行其中的开机管理程序，这个开机管理程序会加载操作系统的核心文件。

5.压缩和打包
压缩：gzip,bzip2
打包：tar
完整备份与恢复：dump和restore

6.vi和vim
文本编辑器vi：一般模式，编辑模式和命令行模式。i,ESC,:wq
程序编辑器vim

7.bash
可以通过 Shell 请求内核提供服务，Bash 正是 Shell 的一种。Shell是Kernel和硬件的接口
变量：环境变量和自定义变量
数据流重定向
管道命令
shell script

基本操作：
type:判断命令是否为bash内置命令
echo：显示变量
set：查看变量
alias：命令别名设置
history：历史命令

8.正则表达式
处理字符串的方法，通过一些特殊符号的辅助，可以让用户轻易达到查找、删除、替换某特定字符串的处理程序。
grep、sed和awk工具

9.进程管理
ps：查看某个时间点的进程信息。
pstree：查看进程树。
top：实时显示进程信息。
netstat：查看占用端口的进程。


Linux系统上查看项目的运行状态
查看日志: tail -f 日志.log
查看运行  ps -ef |grep tomcat

namespace:是 Linux 内核用来隔离内核资源的方式。
使得处于不同 namespace 的进程拥有独立的全局系统资源，通过 namespace 可以让一些进程只能看到与自己相关的一部分资源，其他namespace内的进程不可见。
Linux 内核实现 namespace 的一个主要目的就是实现轻量级虚拟化(容器)服务。为 docker 等容器技术的出现和发展提供了基础条件。

Linux下删除正在进行读写操作的文件
当用户执行 rm 操作后，ls 或者其他文件管理命令不再能够找到这个文件，但是进程却依然在继续正常执行，依然能够从文件中正确的读取内容。
每个文件都有 2 个 link 计数器 —— i_count 和 i_nlink。i_count 的意义是当前使用者的数量，i_nlink 的意义是介质连接的数量。或者可以理解为 i_count 是内存引用计数器，i_nlink 是硬盘引用计数器。再换句话说，当文件被某个进程引用时，i_count 就会增加；当创建文件的硬连接的时候，i_nlink 就会增加。
rm 操作只是将 i_nlink 置为 0 了。由于文件被进程引用的缘故，i_count 不为 0。
