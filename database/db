1.SQL 查询
DISTINCT：相同值只会出现一次，所有列的值都相同才算相同。
LIMIT：限制返回的行数。
SELECT，FROM

WHERE 过滤行：AND 和 OR 用于连接多个过滤条件（优先处理 AND，用 () 来决定优先级），IN 匹配一组值或子查询，NOT 否定。
LIKE 来进行通配符匹配（模糊查询），只能用于文本字段。% 匹配 >=0 个任意字符；_ 匹配 ==1 个任意字符；[ ] 可以匹配集合内的字符，用脱字符 ^ 可以对其进行否定，也就是不匹配集合内的字符。

GROUP BY 分组：可以对同一分组数据使用汇总函数进行处理。指定的分组字段除了能按该字段进行分组，也会自动按该字段进行排序。HAVING 过滤分组，行过滤应当先于分组过滤。HAVING 可以进行聚合函数的判断而 WHERE 不行。
分组规定：除了汇总字段外，SELECT 语句中的每一字段都必须在 GROUP BY 子句中给出；NULL 的行会单独分为一组；大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型。

ORDER BY 排序：升序 ASC（默认），降序 DESC。可以按多个列进行排序，并且为每个列指定不同的排序方式。

函数（针对某一列）：
汇总：AVG()，COUNT()，MAX()，MIN()，SUM()。排除 NULL 值。
文本处理
日期和时间处理
数值处理

子查询：只能返回一个字段的数据。可以将子查询的结果作为 WHRER 语句的过滤条件。或者接在 IN 后，或者作为表接在 FROM 后。
组合查询 UNION：每个查询必须包含相同的列、表达式和聚集函数。默认会去除相同行，如果需要保留相同行，使用 UNION ALL。只能包含一个 ORDER BY 子句，并且必须位于语句的最后。

连接查询：用于连接多个表，使用 JOIN + ON。
连接可以替换子查询，并且比子查询的效率一般会更快。
用 AS 给列名、计算字段和表名取别名，给表名取别名是为了简化 SQL 语句以及连接相同表。

内连接 INNER JOIN：又称等值连接，可以不明确使用 INNER JOIN，而使用普通查询并在 WHERE 中将两个表中要连接的列用等值方法连接起来来代替（隐式）。
左连接 LEFT JOIN：左表的记录将会全部表示出来，而右表只会显示符合搜索条件的记录。右表记录不足的地方均为 NULL。
右连接
自连接：可以看成内连接的一种，只是连接的表是自身而已。
自然连接：把同名列通过等值测试连接起来，同名列可以有多个。内连接和自然连接的区别：内连接提供连接的列，而自然连接自动连接所有同名列。
外连接：保留了没有关联的那些行。分为左外连接，右外连接以及全外连接。

DELETE、TRUNCATE 和 DROP
DELETE：删除表中 WHERE 语句指定的数据。
TRUNCATE：清空表，相当于删除表中的所有数据。
DROP：删除表结构。

区别
事务：DELETE 会被放到日志中以便进行回滚。TRUNCATE 和 DROP 立即生效，不会放到日志中，也就不支持回滚。
删除空间：DELETE 不会减少表和索引占用的空间。TRUNCATE 会将表和索引占用的空间恢复到初始值。DROP 会将表和索引占用的空间释放。
耗时：通常来说，DELETE < TRUNCATE < DROP。

2.其他
主键的值不允许修改，也不允许复用（不能将已经删除的主键值赋给新数据行的主键）。

表 TABLE：CRUD 创建，读取，更新，删除。
使用更新和删除操作时一定要用 WHERE 子句，不然会把整张表的数据都破坏。可以先用 SELECT 语句进行测试，防止错误删除。

视图 VIEW：虚拟的表，本身不包含数据，也就不能对其进行索引操作。数据都存储在原始表中。
视图具有如下好处：
简化复杂的 SQL 操作，比如复杂的连接；
只使用实际表的一部分数据；
通过只给用户访问视图的权限，保证数据的安全性；
更改数据格式和表示。

因为视图不存储数据，所以更新视图需要去更新原始表。如果视图定义只依赖于一个原始表，就很容易进行更新操作。
但如果视图定义中有以下操作，那么就不能进行视图的更新：分组查询、连接查询、子查询、Union、聚集函数、DISTINCT、计算字段。

存储过程：可以看成是对一系列 SQL 操作的批处理。

游标：在存储过程中使用游标可以对一个结果集进行移动遍历。
使用游标的四个步骤：
声明游标，这个过程没有实际检索出数据；
打开游标；
取出数据；
关闭游标；

触发器：会在执行 DELETE、INSERT、UPDATE 语句时而自动执行。

3.关系数据库设计理论
函数依赖：通过 A 属性可以唯一确定 B 属性则称 B 依赖于 A。完全依赖和部分依赖，传递依赖。
码：某属性被其他属性所完全依赖。主属性码中的所有属性。
异常

范式：设计数据库时需要遵循的规则。高级别范式的依赖于低级别的范式。
1NF：属性不可分。
2NF：不能出现部分依赖。在 1NF 基础上，非码属性必须依赖于候选码。可以通过分解来满足。
3NF：不能出现传递依赖。在 2NF 基础上，非主属性不依赖于其他非主属性。将一个实体信息的数据放在一个表内实现。

ER 图：实体、属性、联系

4.事务
数据库管理系统执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。

ACID
原子性 Atomicity：事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。回滚日志 Undo Log 记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。
一致性 Consistency：数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的。
隔离性 Isolation：一个事务所做的修改在最终提交以前，对其它事务是不可见的。
持久性 Durability：一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。系统发生奔溃可以用重做日志 Redo Log 进行恢复，从而实现持久性。与回滚日志记录数据的逻辑修改不同，重做日志记录的是数据页的物理修改。

这几个特性不是一种平级关系。
只有满足一致性，事务的执行结果才是正确的。
在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。
在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。

回退指撤销指定 SQL 语句的过程；不能回退 SELECT、CREATE 和 DROP 语句。
提交指将未存储的 SQL 语句结果写入数据库表；
保留点指事务处理中设置的临时占位符，你可以对它发布回退（与回退整个事务处理不同）。

MySQL 的事务提交默认是自动提交 AUTOCOMMIT，每执行一条增删改 DML 语句，就把这条语句当成一个事务并自动提交。
对于 SQL 语句，当出现 START TRANSACTION 语句时，会开启手动提交。当 COMMIT 或 ROLLBACK 语句执行后，事务会关闭，重新恢复自动提交。
对于 JDBC，setAutoCommit(false) 开启事务，SQL 都执行完了 commit() 提交事务，出现异常在 catch 里 rollback() 会滚事务。
AUTOCOMMIT 标记是针对每个连接而不是针对服务器的。Oracle 默认是手动提交事务。
如果没有设置保留点，ROLLBACK 会回退到 START TRANSACTION 语句处。如果设置了保留点，并且在 ROLLBACK 中指定该保留点，则会回退到该保留点。

5.SQL 注入攻击
服务器上的数据库运行非法的 SQL 语句，主要通过拼接来完成。访问用户通过网站前端对网站可以输入参数的地方进行提交参数，参数里插入了一些恶意参数传入到服务器后端，执行了数据库的 sql 语句并访问敏感信息。sql 注入只对 sql 语句的编译过程有破坏作用。                
过程：
strSQL = "SELECT * FROM users WHERE (name = '" + userName + "') and (pw = '"+ passWord +"');"
username = '1' OR '1'='1';
password = '1' OR '1'='1';
strSQL = "SELECT * FROM users WHERE (name = '1' OR '1'='1') and (pw = '1' OR '1'='1');"
无需验证通过就能执行查询：strSQL = "SELECT * FROM users;"

防止手段： 
使用参数化查询：Java 中的 PreparedStatement 是预先编译的 SQL 语句，参数使用 ? 作为占位符。传入 sql 是在获取 PreparedStatement 对象的那一步，而不是执行 sql 语句的那一步，多了 set 参数给 ？赋值这步。由于没有拼接的过程，因此可以防止 SQL 注入的发生。PreparedStatement 效率更高。                
单引号转换：将传入的参数中的单引号转换为连续两个单引号，PHP 中的 Magic quote 可以完成这个功能。转化成一些其他符号导致 sql 语句无法执行。
正则表达式过滤传入的参数

6.数据库连接池
一般来说，Java 应用程序访问数据库的过程是：
①装载数据库驱动程序；
②通过 JDBC 建立数据库连接；
③访问数据库，执行 SQL 语句；
④断开数据库连接。

问题：
每一次 web 请求都要建立一次数据库连接。建立连接是一个费时的活动，而且系统还要分配内存资源。
频繁的进行数据库连接操作势必占用很多的系统资源，网站的响应速度必定下降，严重的甚至会造成服务器的崩溃。
其次，对于每一次数据库连接，使用完后都得断开。否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，最终将不得不重启数据库。
还有，这种开发不能控制被创建的连接对象数，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。

数据库连接池的基本思想就是为数据库连接建立一个缓冲池。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从缓冲池中取出一个，使用完毕之后再放回去。
我们可以通过设定连接池最大连接数来防止系统无尽的与数据库连接。更为重要的是我们可以通过连接池的管理机制监视数据库的连接的数量、使用情况，为系统开发、测试及性能调整提供依据。

数据库连接池大大提高了数据库连接的利用率，减小了内存吞吐的开销。我们在开发过程中，就不需要再关心数据库连接的问题。
节约资源，访问高效。

连接池的问题：
并发问题

多数据库服务器和多用户
同时连接不同的数据库：
设计一个符合单例模式的连接池管理类，在连接池管理类的唯一实例被创建时读取一个资源文件，其中资源文件中存放着多个数据库的 URL 地址等信息。
根据资源文件提供的信息，创建多个连接池类的实例，每一个实例都是一个特定数据库的连接池。连接池管理类实例为每个连接池实例取一个名字，通过不同的名字来管理不同的连接池。

同一个数据库连多个用户：
对于同一个数据库有多个用户使用不同的名称和密码访问的情况，也可以通过资源文件处理，即在资源文件中设置多个具有相同 URL 地址，但具有不同用户名和密码的数据库连接信息。

事务处理：
在 Java 语言中，connection 类本身提供了对事务的支持，可以通过设置 connection 的 autocommit 属性为 false，然后显式的调用 commit 或 rollback 方法来实现。
但要高效的进行 connection 复用，就必须提供相应的事务支持机制。可采用每一个事务独占一个连接来实现，这种方法可以大大降低事务管理的复杂性。
 
连接池的分配与释放：对系统的性能有很大的影响。合理的分配与释放，可以提高连接的复用度，从而降低建立新连接的开销，同时还可以加快用户的访问速度。
对于连接的管理可使用空闲池。即把已经创建但尚未分配出去的连接按创建时间存放到一个空闲池中。
每当用户请求一个连接时，系统首先检查空闲池内有没有空闲连接。如果有就把建立时间最长（通过容器的顺序存放实现）的那个连接分配给他（实际是先做连接是否有效的判断，如果可用就分配给用户，如不可用就把这个连接从空闲池删掉，重新检测空闲池是否还有连接）；
如果没有则检查当前所开连接池是否达到连接池所允许的最大连接数 maxconn 如果没有达到，就新建一个连接，如果已经达到，就等待一定的时间 timeout。如果在等待的时间内有连接被释放出来（olderst 的连接）就可以把这个连接分配给等待的用户，如果等待时间超过预定时间 timeout 则返回空值 null。
系统对已经分配出去正在使用的连接只做计数，当使用完后再返还给空闲池。对于空闲连接的状态，可开辟专门的线程定时检测，这样会花费一定的系统开销，但可以保证较快的响应速度。也可采取不开辟专门线程，只是在分配前检测的方法。

连接池的配置与维护：
系统可采取设置最小连接数 minconn 和最大连接数 maxconn 来控制连接池中的连接。最小连接数是系统启动时连接池所创建的连接数。如果创建过多，则系统启动就慢，但创建后系统的响应速度会很快；如果创建过少，则系统启动的很快，响应起来却慢。
这样，可以在开发时，设置较小的最小连接数，开发起来会快，而在系统实际使用时设置较大的，因为这样对访问客户来说速度会快些。最大连接数是连接池中允许连接的最大数目，具体设置多少，要看系统的访问量，可通过反复测试，找到最佳点。
如何确保连接池中的最小连接数：有动态和静态两种策略。动态即每隔一定时间就对连接池进行检测，如果发现连接数量小于最小连接数，则补充相应数量的新连接以保证连接池的正常运转。静态是发现空闲连接不够时再去检查。

第三方数据库连接池：Apache commons-dbcp（不活跃）、c3p0（很久没有更新）、Druid（阿里）、HikariCP。

7.JDBC
Java 数据库连接，定义的一套操作所有关系型数据库的接口，不同数据库实现接口，提供 JAR 包。

DriverManager 驱动管理对象：注册驱动，获取数据库连接。
Connection 数据库连接对象：获取执行 sql 的对象，管理事务。
Statement 执行 sql 的对象。
PreparedStatement 执行 sql 的对象。
ResultSet 结果集对象，封装查询结果。

在 JDBC 之上做了封装的有：Spring 的 JDBCTemplate、common-dbutil、MyBatis、hibernate。
数据库 MySQL、Oracle 等 -> 数据库驱动 -> JDBC -> 对 JDBC 作封装的 -> 数据访问层 -> 业务逻辑层 -> 表现层。 
