1.AOP
面向切面编程
使用"横切"技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。
基于代理思想，对原来目标对象，创建代理对象，在不修改原对象代码情况下，通过代理对象，调用增强功能的代码，从而对原有业务方法进行增强 ！
分为JDK动态代理和Cglib动态代理（对没有实现接口的类增强）。

实现AOP的技术，主要分为两大类：一是采用动态代理技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；
二是采用静态织入的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码.

2.IOC
控制反转
实现将组件间的关系从程序内部提到外部容器（spring的xml）来管理。
首先外部容器（spring.xml）中会动态的注册业务所需的对象（接口/类）。

或者叫DI：依赖注入
组件之间的依赖关系由容器在应用系统运行期来决定， 也就是由容器动态地将某种依赖关系的目标对象实例注入到应用系统中的各个关联的组件之中。

创建被调用者实例的工作通常由spring容器来完成，然后注入调用者

IOC是工厂模式
AOP是代理模式
