1.简介
Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。

版本控制：一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 除了项目源代码，你可以对任何类型的文件进行版本控制。
有了版本控制就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。

Git与其他版本管理系统的主要差别：对待数据的方式。Git采用的是直接记录快照的方式，而非差异比较。
Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。Git 对待数据更像是一个 快照流。

与SVN集中式的区别：
集中式版本控制只有中心服务器拥有一份代码，而分布式版本控制每个人的电脑上就有一份完整的代码。
集中式版本控制有安全性问题，当中心服务器挂了所有人都没办法工作了。
集中式版本控制需要连网才能工作，如果网速过慢，那么提交一个文件会慢的无法让人忍受。而分布式版本控制不需要连网就能工作。
集中式版本控制新建一个分支相当于复制一份完整代码，而分布式版本控制新建分支、合并分支操作速度非常快。

2.工作流
新建一个仓库之后，当前目录就成为了工作区，工作区下有一个隐藏目录 .git，它属于 Git 的版本库。
Git 的版本库有一个称为 Stage 的暂存区以及最后的 History 版本库，History 存储所有分支信息，使用一个 HEAD 指针指向当前分支。
工作区<->Stage<->History

add files：把文件的修改添加到暂存区
commit：把暂存区的修改提交到当前分支，提交之后暂存区就被清空了
reset -- files：commit逆操作
checkout -- files：add files逆操作
commit -a：工作区->History
checkout HEAD -- files：History->工作区

3.分支
使用指针将每个提交连接成一条时间线，HEAD 指针指向当前分支指针。
新建分支是新建一个指针指向时间线的最后一个节点，并让 HEAD 指针指向新分支，表示新分支成为当前分支。
每次提交只会让当前分支指针向前移动，而其它分支指针不会移动。
合并分支也只需要改变指针即可。

当两个分支都对同一个文件的同一行进行了修改，在分支合并时就会产生冲突。
Git 会使用 <<<<<<< ，======= ，>>>>>>> 标记出不同分支的内容，只需要把不同分支中冲突部分修改成一样就能解决冲突。

"快进式合并"（fast-farward merge），会直接将 master 分支指向合并的分支，这种模式下进行分支合并会丢失分支信息，也就不能在分支历史上看出分支信息。

master 分支应该是非常稳定的，只用来发布新版本；
日常开发在开发分支 dev 上进行。

储藏（Stashing）
在一个分支上操作之后，如果还没有将修改提交到分支上，此时进行切换分支，那么另一个分支上也能看到新的修改。这是因为所有分支都共用一个工作区的缘故。
可以使用 git stash 将当前分支的修改储藏起来，工作区没有任何未提交的修改。此时就可以安全的切换到其它分支上了。
该功能可以用于 bug 分支的实现。如果当前正在 dev 分支上进行开发，但是此时 master 上有个 bug 需要修复，但是 dev 分支上的开发还未完成，不想立即提交。在新建 bug 分支并切换到 bug 分支之前就需要使用 git stash 将 dev 分支的未提交修改储藏起来。

Git 仓库和 Github 中心仓库之间的传输是通过 SSH 加密。
.gitignore 文件忽略：
操作系统自动生成的文件
编译生成的中间文件
自己的敏感信息
