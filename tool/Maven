1.简介
Maven 是一个软件（特别是 Java 软件）项目管理及自动构建工具，由 Apache 软件基金会所提供。
基于项目对象模型 POM 概念，Maven 利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。

2.构建工具的作用
构建一个项目通常包含了依赖管理、测试、编译、打包、发布等流程，构建工具可以自动化进行这些操作，从而为我们减少这些繁琐的工作。
其中构建工具提供的依赖管理能够可以自动处理依赖关系。
在 Java 项目中，打包流程通常是将项目打包成 Jar 包。在没有构建工具的情况下，我们需要使用命令行工具或者 IDE 手动打包。而发布流程通常是将 Jar 包上传到服务器上。

依赖管理：不再需要手动导入 Jar 依赖包，可以自动处理依赖关系。
运行单元测试：不再需要在项目代码中添加测试代码，从而避免了污染项目代码。
将源代码转化为可执行文件：包含预处理、编译、汇编、链接等步骤。
将可执行文件进行打包：不再需要使用 IDE 将应用程序打包成 Jar 包。
发布到生产服务器上：不再需要通过 FTP 将 Jar 包上传到服务器上。

3.Ant、Maven 和 Gradle
Ant 具有编译、测试和打包功能。
Maven 在 Ant 的功能基础上又新增了依赖管理功能。提供了项目对象模型 POM 文件来管理项目的构建。
Gradle 又在 Maven 的功能基础上新增了对 Groovy 语言的支持。Gradle 使用特定领域语言 DSL 来管理构建脚本，而不再使用 XML 这种标记性语言。因为项目如果庞大的话，XML 很容易就变得臃肿。

Maven：
仓库的搜索顺序为：本地仓库、远程仓库、中央仓库。
本地仓库用来存储项目的依赖库；
中央仓库是下载依赖库的默认位置；
远程仓库，因为并非所有的依赖库都在中央仓库，或者中央仓库访问速度很慢，远程仓库是中央仓库的补充。

POM：
[groupId, artifactId, version, packaging, classifier] 称为一个项目的坐标，其中 groupId、artifactId、version 必须定义，packaging 可选（默认为 Jar），classifier 不能直接定义的，需要结合插件使用。
groupId：项目组 Id，必须全球唯一；
artifactId：项目 Id，即项目名；
version：项目版本；
packaging：项目打包方式。

依赖原则和解决依赖冲突
