1.插入

2.交换

快排：
private int Partiton(int[] a,int l,int r) {
    int i=l,j=r,pivot=a[l];
    while(i<j){
        while(i<j&&pivot<=a[j]) j--;
        a[i]=a[j];
        while(i<j&&pivot>=a[i]) i++;
        a[j]=a[i];
    }
    a[i]=pivot;
    return i;
}
public void QuickSort1(int[] a,int l,int r){
    if(l<r){
        int idx=Partition(a,l,r);
        QuickSort(a,l,idx-1);
        QuickSort(a,idx+1,r);
    }
}
    
public void QuickSort2(int[] a,int l,int r){
    if(l<r){
        int i=l,j=r,pivot=a[l];
        while(i<j){
            while(i<j&&pivot<=a[j]) j--;
            if(i<j) a[i++]=a[j];
            while(i<j&&pivot>=a[i]) i++;
            if(i<j) a[i]=a[j--];
        }
        a[i]=pivot;
        QuickSort2(a,l,i-1); 
        QuickSort2(a,i+1,r);
    }
}

稳定版：创建一个数组存储要交换的数据，记录位置信息

3.选择

4.归并

5.二分查找
public int binarySearch(int[] a, int n) {
    int i=0,j=a.length-1;
    while(i<=j){
        int mid=(i+j)>>1;
        if(a[mid]<n) i=mid+1;
        else if(a[mid]>n)j=mid-1;
        else return mid;
    }
    return -1;
}
