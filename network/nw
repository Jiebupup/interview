1.概述
计网分类：
分布范围：广域网 WAN，局域网 LAN，城域网 MAN，个域网 PAN
传输技术：广播式，点对点
拓扑结构：星形，总线形，环形，网状形
交换技术：电路交换，报文交换，分组交换

计网性能指标：带宽，时延，时延带宽积，往返时延 RTT，吞吐量，速率

计算机网络体系结构：
协议，接口，服务（下层为上层），PDU=SDU+PCI

五层协议：物理层（比特），数据链路层（帧），网络层（数据报），传输层（报文段，用户数据报），应用层
OSI：物理层，数据链路层，网络层，传输层，会话层，表示层，应用层
TCP/IP：网络接口层，网际层，运输层，应用层

2.物理层
通信基础：
通信方式：单工、半双工和全双工。
数据传输速率：奈奎斯特定理，香农定理
编码（数字信号）和调制（模拟信号）：曼切斯特编码，幅移键控 ASK，脉码调制 PCM，频分复用 FDM
分组交换：数据报，虚电路

传输介质：双绞线，同轴电缆，光纤，无线传输介质
设备：中继器，集线器 Hub

3.数据链路层
组帧：比特填充法
差错检测：循环冗余码 CRC

流量控制：滑动窗口，自动重传请求 ARQ，停等协议，后退 N 帧 GBN，选择重传 SR
可靠传输：确认和超时重传

CSMA/CD：先听后发，边听边发，冲突停发，随机重发
CSMA/CA

以太网：星型拓扑结构局域网，MAC 帧结构，MAC 地址用于唯一标识网络适配器（网卡）
虚拟局域网

广域网：PPP 协议，HDLC 协议
设备：网桥，交换机

4.网络层
IP 数据报首部，分片
IP 地址分类，网络地址转换 NAT，子网划分，无分类编址 CIDR
网络地址转换 NAT：专用网本地 IP 转换为全球 IP

IP 协议：地址解析协议 ARP，网际控制报文协议 ICMP，网际组管理协议 IGMP，动态主机配置协议 DHCP
地址解析协议 ARP：由 IP 地址得到 MAC 地址。RARP。

网际控制报文协议 ICMP：分为差错报告报文和询问报文。
ICMP Echo 报文。类型 0 表示响应，类型 8 表示请求。
ping 用来探测主机到主机之间是否可通信。基于 Echo 请求和应答报文，主机向目标机发送请求，目标机收到发送应答。也可以用来估计往返时间和丢包率。                          
Traceroute 用来侦测主机到目的主机之间所经路由情况。通过 TTL 减为 0 和主机不可达的 ICMP 报文实现。

路由算法：距离向量算法，链路状态算法
路由协议：内部网关协议 RIP（距离向量 UDP）和 OSPF（链路状态 IP），外部网关协议 BGP（路径向量 TCP）

IPv6，IP 组播，移动 IP，虚拟专用网 VPN
路由器功能：路由选择和分组转发。

5.传输层
端到端 
多路分解与多路复用：TCP 与 UDP 分解不同，两个具有不同源 IP 或源端口号的到达的 TCP 报文段将被重定向到两个不同的套接字。服务器主机可以支持很多并行的 TCP 套接字，每一个套接字和一个进程相联系，并由其四元组（源 IP 地址、源端口号，目的 IP 地址，目的端口号）来标识每一个套接字。     
套接字=IP 地址+端口号

区别
UDP：无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。只在 IP 数据报服务上增加了复用和差错检测。传输速度快，所需资源少。
TCP：面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一），不提供广播或多播服务。传输速度慢，所需资源多。确认、窗口、重传，在数据传完后，还会断开连接用来节约系统资源。开销大，首部增大，占用许多处理机资源。            

UDP 首部：源端口、目的端口、长度、检验和，12B 的伪首部是为了计算检验和临时添加的。8B 首部。
TCP 首部：源端口、目的端口、序号、确认号、首部长度、位、窗口、检验和、选项。20B 首部。

TCP 三次握手
过程：
服务器处于 LISTEN 状态，等待来自客户端的连接请求。
客户端向服务器发送连接请求报文 SYN。
服务器收到客户端发来的 SYN，如果同意建立连接，则向客户端发送连接确认报文 SYN ACK。
客户端收到 SYN ACK 后，还要向服务器发出确认报文 ACK。
服务器收到 ACK 后，连接建立。

第一次 SYN=1，seq=x，服务端得出结论：客户端的发送能力、服务端的接收能力是正常的。
第二次 SYN=1，ACK=1，seq=y，ack=x+1，客户端得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常。
第三次 ACK=1，seq=x+1，ack=y+1，服务端得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常。

Client：CLOSED->SYN_SENT->ESTABLISHED
Server：LISTEN->SYN_RCVD->ESTABLISHED

进行三次握手的主要作用：确认双方的接收能力和发送能力是否正常，指定自己的初始化序列号为后面的可靠性传送做准备。
实质上其实就是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口大小信息。

第三次握手的原因：
为了防止失效的连接请求到达服务器，让服务器错误打开连接。
客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。
数据传输完毕后，就释放了连接。但是滞留的连接请求延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接。
不采用三次握手，服务端以为建立了新的连接。但此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。
如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。

SYN 洪泛攻击：典型的 DoS 拒绝服务攻击，攻击客户端在短时间内伪造大量不存在的 IP 地址，向服务器不断地发送 SYN 包，服务器回复确认包，并等待客户的确认。
由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的 SYN 包将长时间占用未连接队列，正常的 SYN 请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。
第三次握手 ACK 报文段可以携带数据，不携带数据则不消耗序号。第一次和第二次握手不可以携带数据，前者因为会让服务器更加容易受到攻击。而对于第三次的话，此时客户端已经处于 ESTABLISHED 状态。对于客户端来说，他已经建立起连接了，并且也已经知道服务器的接收、发送能力是正常的。
在 Linux/Unix 上可以使用系统自带的 netstats 命令来检测 SYN 攻击。netstat -n -p TCP | grep SYN_RECV。当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击。
常见的防御 SYN 攻击的方法：缩短 SYN Timeout 时间，增加最大半连接数，过滤网关防护，SYN cookies 技术。

半连接队列：服务器第一次收到客户端的 SYN 之后，就会处于 SYN_RCVD 状态，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在一个队列里，我们把这种队列称之为半连接队列。
当然还有一个全连接队列，就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象。
如果第三次握手丢失了，客户端服务端会如何处理？答：服务器发送完 SYN-ACK 包，如果未收到客户确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传。如果重传次数超过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。注意，每次重传等待的时间不一定相同，一般会是指数增长。

初始序列 ISN：当一端为建立连接而发送它的 SYN 时，它为连接选择一个初始序号。ISN 随时间而变化，因此每个连接都将具有不同的 ISN。ISN 可以看作是一个 32 比特的计数器，每 4ms 加 1。这样选择序号的目的在于防止在网络中被延迟的分组在以后又被传送，而导致某个连接的一方对它做错误的解释。
三次握手的其中一个重要功能是客户端和服务端交换 ISN，以便让对方知道接下来接收数据的时候如何按序列号组装数据。如果 ISN 是固定的，攻击者很容易猜出后续的确认号，因此 ISN 是动态生成的。

四次挥手
过程：
客户端发送连接释放报文 FIN。
服务器收到 FIN 之后发出确认 ACK，此时 TCP 属于半关闭状态，服务器能向客户端发送数据但是客户端不能向服务器发送数据。
当服务器不再需要连接时，发送连接释放报文 FIN。
客户端收到 FIN 后发出确认 ACK，进入 TIME-WAIT 状态，等待 2MSL 后释放连接。
服务器收到 ACK 后释放连接。

第一次 FIN=1,seq=u
第二次 ACK=1,seq=v,ack=u+1
第三次 FIN=1,ACK=1,seq=w,ack=u+1
第四次 ACK=1,seq=u+1,ack=w+1

Client：ESTABLISHED->FIN_WAIT_1->FIN_WAIT_2->TIME_WAIT->CLOSED
Server：ESTABLISHED->CLOSE_WAIT->LAST_ACK->CLOSED

TCP 状态转移图

四次挥手的原因：
客户端发送了 FIN 连接释放报文之后，服务器端收到了这个报文，就进入了被动关闭 CLOSE_WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器端会发送 FIN 连接释放报文。

主动关闭 TIME_WAIT：客户端收到连接释放报文要等 2MSL 才能进入关闭，两个原因：
确保客户端发送的最后一个 ACK 报文能够到达服务端。如果服务器没收到客户端发送来的确认报文，那么就会重新发送 FIN+ACK 报文，而客户端能在 2MSL 时间内收到这个重传的 FIN+ACK 报文，然后重发 ACK 报文。
防止已失效的连接请求报文段出现在本连接中。等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。

TIME_WAIT 过多：
在高并发短连接的 TCP 服务器上，当服务器处理完请求后立刻主动正常关闭连接。这个场景下会出现大量 socket 处于 TIME_WAIT 状态。如果客户端的并发量持续很高，此时部分客户端就会显示连接不上。
高并发可以让服务器在短时间范围内同时占用大量端口。
短连接表示业务处理+传输数据的时间，远远小于 TIMEWAIT 超时时间的连接。
持续的到达一定量的高并发短连接，会使服务器因端口资源不足而拒绝为一部分客户服务。同时，这些端口都是服务器临时分配，无法用 SO_REUSEADDR 选项解决这个问题。

可行而且必须存在，但是不符合原则的解决方式：
修改内核协议栈代码中关于这个 TIMEWAIT 的超时时间参数，重编内核，让它缩短超时时间，加快回收；
利用 SO_LINGER 选项的强制关闭方式，发 RST 而不是 FIN，来越过 TIMEWAIT 状态，直接进入 CLOSED 状态。

还可以使用的方法：负载均衡、打开系统的 TIMEWAIT 重用和快速回收。

TCP 可靠传输：
应用数据被分割成 TCP 认为最适合发送的数据块。
TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。
校验和：TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。
TCP 的接收端会丢弃重复的数据。
流量控制：TCP 连接的每一方都有固定大小的缓冲空间，TCP 的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。（TCP 利用滑动窗口实现流量控制）
拥塞控制：当网络拥塞时，减少数据的发送。
ARQ 协议：也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。
超时重传：当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。

TCP 滑动窗口是缓存的一部分
TCP 流量控制：通过控制窗口大小
TCP 拥塞控制：慢开始、拥塞避免、快重传、快恢复。拥塞窗口，发送窗口，接收窗口

TCP KeepAlive 保活机制：连接的另一方并不知道对端的情况，为了避免资源浪费，隔一段时间给连接对端发送一个探测包，如果收到对方回应的 ACK，则认为连接还是存活的，在超过一定重试次数之后还是没有收到对方的回应，则丢弃该 TCP 连接。

6.应用层
网络应用模型：客户-服务器 C/S，对等 P2P
域名系统 DNS（UDP）：递归与迭代域名解析。域名服务器层级：权限域名服务器-> 顶级域名服务器-> 根域名服务器。
文件传输协议 FTP（TCP）：控制连接和数据连接
电子邮件协议：发送 SMTP，接收 POP3，MIME
超文本传输协议 HTTP，Wireshark 捕获 HTTP 请求报文
远程登录协议 TELNET

7.浏览器输入 URL 发生了什么
互联网上每一台计算机的唯一标识是它的 IP 地址，要想找到网址对应的服务器进行通信，首先需要找到 IP 地址。
DNS 解析：输入统一资源定位符，就是网址，转换为 IP 地址。UDP、端口 53。
DNS 服务器的 IP 地址，有可能是动态的，每次上网时由网关分配，这叫做 DHCP 机制；也有可能是事先指定的固定地址。Linux 系统里面，DNS 服务器的 IP 地址保存在 /etc/resolv.conf 文件。
次级域名.顶级域名.根域名
这个 . 对应的就是根域名服务器，默认情况下所有的网址的最后一位都是 .，既然是默认情况下，为了方便用户，通常都会省略，浏览器在请求 DNS 的时候会自动加上，所有网址真正的解析过程为: . -> com. -> google.com. -> www.google.com.。
DNS 工具：dig、host 命令、nslookup 命令、whois 命令。
DNS 查询有两种方式：递归和迭代。DNS 客户端设置使用的 DNS 服务器一般都是递归服务器，它负责全权处理客户端的 DNS 查询请求，直到返回最终结果。而 DNS 服务器之间一般采用迭代查询方式。                        

DNS 缓存：
chrome 浏览器中输入 chrome://net-internals/#dns，你可以看到 chrome 浏览器的 DNS 缓存。
操作系统缓存主要存在 /etc/hosts 中。
互联网服务提供商 ISP 提供的本地域名服务器 LDNS。
最后本地域名服务器得到 IP 地址并把它缓存到本地，供下次查询使用。
DNS 负载均衡：DNS 返回的 IP 地址每次都不一样，DNS 可以返回一个合适的机器的 IP 给用户，例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等，这种过程就是 DNS 负载均衡，又叫做 DNS 重定向。大家耳熟能详的 CDN 就是利用 DNS 的重定向技术。

TCP 连接：
HTTP 协议是使用 TCP 作为其传输层协议。
三次握手，HTTP 端口 80。
HTTPS 的 TLS/SSL 握手过程，端口 443。

发送 HTTP 请求：HTTP 请求报文。
服务器处理请求并返回 HTTP 响应：HTTP 响应报文。
浏览器解析渲染页面
连接结束


UDP 实现可靠传输：在应用层实现重传，确认和序号机制（利用包）。
TCP 包最大 1500 B，UDP 包最大 64KB。
TCP 协议是有状态的，有限自动机。
