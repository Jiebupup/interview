stack：
Stack<Integer> s = new Stack<>();
isEmpty() size() push() pop() peek() 

queue：
Queue<Integer> q=new LinkedList<>();
isEmpty() size() offer() poll() add() remove()

PriorityQueue：
PriorityQueue<Integer> pq=new PriorityQueue<>();
isEmpty() size() offer() poll() add() remove() peek()

String：length() 长度，charAt() 字符，concat() 拼接，substring(begin,end) 子串（左闭右开），compareTo() 比较，equals() 相等，indexOf() 索引（首次出现），split() 分割（regex 注意 . 和 \\.），trim() 删除头尾空白符，new String(chars) 字符数组转为字符串和 toCharArray() 逆操作。
Arrays：sort() 排序（默认升序），binarySearch() 二分查找，equals() 相等，fill() 填充，asList() 转成列表，toString() 转成字符串，copyOf() 复制数组。
Collections：clear() 清空，contains() 包含，toArray() 转换为数组，reverse() 反转，addAll() 添加，shuffle() 随机排序，sort() 排序，swap() 交换，rotate() 旋转，binarySearch() 二分查找，max() 最大，fill() 填充，frequency() 统计次数，indexOfSubList() 子集合出现的位置，replaceAll() 用新元素代替旧元素。                    
ArrayList：get() 获取元素，clear() 清空，stream().mapToInt(Integer::intValue).toArray() 转化为 int[]。
LinkedList：add()/push() 等效于 addFirst，remove()/pop() 等效于 removeFirst()。
TreeSet：floor(val) 返回小于 val 的值，ceiling() 大于。

sequence 不需要连续

快排稳定版：创建一个数组存储要交换的数据，记录位置信息。
堆排序：复杂度 CNlogN（堆排序会有很多无用的比较，C 会比较大）。堆排序无法利用局部性原理缓存，大量的元素比较。
