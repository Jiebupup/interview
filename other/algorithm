stack：
Stack<Integer> s = new Stack<>();
isEmpty() size() push() pop() peek() 

queue：
Queue<Integer> q=new LinkedList<>();
isEmpty() size() offer() poll() add() remove()

PriorityQueue：
PriorityQueue<Integer> pq=new PriorityQueue<>();
isEmpty() size() offer() poll() add() remove() peek()

String：length() 长度，charAt() 字符，concat() 拼接，substring(begin,end) 子串（左闭右开），compareTo() 比较，equals() 相等，indexOf() 索引（首次出现），split() 分割（regex 注意 . 和 \\.），trim() 删除头尾空白符。
Arrays：sort() 排序（默认升序），binarySearch() 二分查找，equals() 相等，fill() 填充，asList() 转成列表，toString() 转成字符串，copyOf() 复制数组。
Collections：clear() 清空，contains() 包含，toArray() 转换为数组，reverse() 反转，addAll() 添加，shuffle() 随机排序，sort() 排序，swap() 交换，rotate() 旋转，binarySearch() 二分查找，max() 最大，fill() 填充，frequency() 统计次数，indexOfSubList() 子集合出现的位置，replaceAll() 用新元素代替旧元素。                    
ArrayList：get() 获取元素，clear() 清空，stream().mapToInt(Integer::intValue).toArray() 转化为 int[]。
LinkedList：add()/push() 等效于 addFirst，remove()/pop() 等效于 removeFirst()。
TreeSet：floor(val) 返回小于 val 的值，ceiling() 大于。

sequence 不需要连续

快排稳定版：创建一个数组存储要交换的数据，记录位置信息。
堆排序：复杂度 CNlogN（堆排序会有很多无用的比较，C 会比较大）。

1.二分查找
public int binarySearch1(int[] a, int n) {
    int i=0,j=a.length-1;
    while(i<=j){
        int mid=i+(j-i)>>1;
        if(a[mid]<n) i=mid+1;
        else if(a[mid]>n)j=mid-1;
        else return mid;
    }
    return -1;
}

public int binarySearch2(int[] a, int n) {
    int i=0,j=a.length-1;
    while(i<j){
        int mid=i+(j-i)>>1;
        if(a[mid]<n) i=mid+1;
        else j=mid;
    }
    return i;
}

3.四则运算计算器
public int calculate(String s){
    if(s==null||s.length()<1) return 0;
    int num=0,res=0;
    char op='+';    
    Stack<Integer> stack=new Stack<>();
    for(int i=0;i<s.length();i++){
        if(Character.isDigit(s.charAt(i))) num=num*10+s.charAt(i)-'0';
        else if(s[i]=='('){
            int cnt=0;
            int j=i;
            for(;i<s.length();i++){
                if(s[i]=='(') cnt++;
                if(s[i]==')') cnt--;
                if(cnt==0) break;
            }
            num=calculate(s.substring(j+1,i-j-1));
        }
        if(!Character.isDigit(s.charAt(i))&&s.charAt(i)!=' '||i==s.length()-1){
            if(op=='+') stack.push(num);
            if(op=='-') stack.push(-num);
            if(op=='*') stack.push(stack.pop()*num);
            if(op=='/') stack.push(stack.pop()/num);
            op=s.charAt(i);
            num=0;
        }
    }
    for(int i:stack){
        res+=i;
    }
    return res;
}

7.泛型实现最小值函数
方法只能接受 Number 的子类并且实现了 Comparable 接口。
private static <T extends Number & Comparable<? super T>> T min(T[] values) {
    if (values == null || values.length == 0) return null;
    T min = values[0];
    for (int i = 1; i < values.length; i++) {
        if (min.compareTo(values[i]) > 0) min = values[i];
    }
    return min;
}

int minInteger = min(new Integer[]{1, 2, 3});  //result:1
double minDouble = min(new Double[]{1.2, 2.2, -1d});  //result:-1d
String typeError = min(new String[]{"1", "3"});  //报错
