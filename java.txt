1.jvm
jvm是一个可以执行Java字节码的虚拟进程。
java源程序先经过javac编译器编译成二进制的.class字节码文件，.class字节码文件与平台无关，.class文件再运行在jvm上，java解释器（jvm的一部分）会将其解释成对应平台的机器码执行。
java的跨平台就是在不同平台上安装了不同的jvm，而在不同平台上生成的.class文件都是一样的，而.class文件再由对应平台的jvm解释成对应平台的机器码执行。

2.JDK和JRE
JRE是java运行时环境，包含了java虚拟机，java基础类库。是使用java语言编写的程序运行所需要的软件环境，是提供给想运行java程序的用户使用的。
JDK是java开发工具包，是程序员使用java语言编写java程序所需的开发工具包，是提供给程序员使用的。JDK包含了JRE，同时还包含了编译java源码的编译器javac和调试器等。
如果你需要运行java程序，只需安装JRE就可以了。如果你需要编写java程序，需要安装JDK。

3.static
Static表示静态的意思，可用于修饰成员变量和成员函数，被静态修饰的成员函数只能访问静态成员，不可以访问非静态成员。
Java中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。
java中也不可以覆盖private的方法，因为private修饰的变量和方法只能在当前类中使用，如果是其他的类继承当前类是不能访问到private变量或方法的，当然也不能覆盖。
static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。当类加载时，此时不一定有实例创建，没有实例，就不可以访问非静态的成员。

4.自动拆装箱
自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成Double，等等。反之就是自动拆箱。
Java支持的数据类型包括两种：一种是基本数据类型，包含byte，char,short, boolean ,int , long, float,double;另一种是引用类型：如String等，其实是对象的引用，JVM中虚拟栈中存的是对象的地址，创建的对象实质在堆中，通过地址来找到堆中的对象的过程，即为引用类型。

5.覆盖(Overriding)和重载(Overload)
覆盖：方法名、参数列表必须相同，返回类型相同或为其子类型，只能用于子类覆盖父类的方法，对方法的访问权限和抛出的异常有特殊的要求，父类的一个方法只能被子类重写一次，被重写的方法不能是final，private，static，发生在运行时。
重载：方法名必须相同，参数列表必须不同（个数不同、或类型不同、参数类型排列顺序不同等），返回类型可以相同也可以不相同，用于同一个类中的所有方法，一个方法可以在所有的类中可以被重载多次。
Java中除了static和final（包含private）方法之外，其它所有方法都是运行时绑定。

6.构造方法，构造方法重载，复制构造方法
Java中的构造函数是为了初始化对象的，构造函数的函数名和类名一致。当新对象被创建的时候，构造方法会被调用。每一个类都有构造方法。在程序员没有给类提供构造方法的情况下，Java编译器会为这个类创建一个默认的构造方法。Java中构造方法重载和方法重载很相似。可以为一个类创建多个构造方法。每一个构造方法必须有它自己唯一的参数列表。
Java不支持像C++中那样的复制构造方法。

7.继承
Java中类不支持多继承，但是java中的接口支持多继承，即一个子接口可以有多个父接口。

8.接口和抽象类的区别是什么？
接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。
类可以实现很多个接口，但是只能继承一个抽象类。
类可以不实现抽象类和接口声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。
抽象类可以在不提供接口方法实现的情况下实现接口。
Java接口中声明的变量默认都是final的。抽象类可以包含非final的变量。
Java接口中的成员函数默认是public的。抽象类的成员函数可以是private，protected或者是public。
接口是绝对抽象的，不可以被实例化，抽象类也不可以被实例化。

9.值传递和引用传递
值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量。
引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。
一般认为,java内的基础类型数据传递都是值传递. java中实例对象的传递是引用传递。

10.进程和线程
区别？
在多线程OS中，进程不是一个可执行的实体。
创建线程的方式：一、继承Thread类 二、实现Runnable接口 三、使用Executor框架创建线程池 四、实现callable接口。
常见的Runnable接口较好，一个类可以继承多个接口，避免多继承类。
线程的几种可用状态：新建( new )，可运行( runnable )，运行( running )，阻塞( block )，死亡( dead )
阻塞从运行状态转变过来，分为一、等待阻塞：执行 o . wait ()方法， JVM 会把该线程放 入等待队列( waitting queue )中。 二、同步阻塞：在获取对象的同步锁时，若该同步锁被别的线程占用，则 JVM 会把该线程放入锁池( lock pool )中。 三、其他阻塞: 执行 Thread . sleep ( long ms )或 t . join ()方法，或者发出了 I / O 请求时， JVM 会把该线程置为阻塞状态。当 sleep ()状态超时、 join ()等待线程终止或者超时、或者 I / O 处理完毕时，线程重新转入可运行( runnable )状态。

11.同步方法和同步代码块
同步方法使用关键字 synchronized修饰方法，而同步代码块用synchronized（object）{代码内容}进行修饰。
同步方法默认用this或者当前类class对象作为锁，同步代码块可以选择以什么来加锁，比同步方法要更细颗粒度，我们可以选择只同步会发生同步问题的部分代码而不是整个方法。

12.监视器(Monitor)内部，是如何做线程同步的？
监视器和锁在Java虚拟机中是一块使用的，为了实现监视器的互斥功能。监视器监视一块同步代码块，确保一次只有一个线程执行同步代码块。每一个监视器都和一个对象引用相关联。线程在获取锁之前不允许执行同步代码。
显式监视器( Lock )和隐式监视器( synchronized )。

13.死锁
多个进程因竞争资源而造成的一种僵局（互相等待），若无外力作用，这些进程都将无法向前推进。
死锁产生的4个必要条件：互斥、不剥夺、请求和保持、循环等待
原因：系统资源不足，进程运行推进顺序不合适，资源分配不当等。
避免死锁：最简单就是破环循环等待条件。按同一顺序加载锁，释放锁。

14.Java集合类框架的基本接口
两大接口：Collection 和Map，一个元素集合，一个是键值对集合。
List和Set接口继承了Collection接口，一个是有序元素集合，一个是无序元素集合。
ArrayList和 LinkedList 实现了List接口，HashSet实现了Set接口。
HashMap 和HashTable实现了Map接口，并且HashTable是线程安全的，但是HashMap性能更好。
HashSet是由一个hash表来实现的，因此，它的元素是无序的。add()，remove()，contains()方法的时间复杂度是O(1)。另一方面，TreeSet是由一个树形的结构来实现的，它里面的元素是有序的。因此，add()，remove()，contains()方法的时间复杂度是O(logn)。Treeset 底层是由红黑树实现的。如果需要在Treeset 中插入对象，需要实现Comparable 接口，为其指定比较策略。

15.为什么集合类没有实现Cloneable和Serializable接口？
克隆(cloning)或者是序列化(serialization)的语义和含义是跟具体的实现相关的。因此，应该由集合类的具体实现来决定如何被克隆或者是序列化。

16.迭代器(Iterator)
迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构。Java中的Iterator可用来遍历Set和List集合，并且只能单向移动。ListIterator实现了Iterator接口，既可以前向也可以后向遍历。
快速失败(fail-fast)：在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的结构进行了修改（增加、删除），则会抛出Concurrent Modification Exception。异常的抛出条件是检测到 modCount！=expectedmodCount ，不能依赖于这个异常是否抛出而进行并发操作的编程。java.util包下的集合类都是快速失败的，不能在多线程下发生并发修改（迭代过程中被修改）。
安全失败(fail-safe)：采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。基于拷贝内容的优点是避免了Concurrent Modification Exception，缺点在遍历期间原集合发生的修改迭代器是不知道的，迭代器并不能访问到修改后的内容。java.util.concurrent包下的容器都是安全失败，可以在多线程下并发使用，并发修改。
Enumeration接口和Iterator接口的区别：Enumeration速度是Iterator的2倍，同时占用更少的内存。但是，Iterator远远比Enumeration安全，因为其他线程不能够修改正在被iterator遍历的集合里面的对象。同时，Iterator允许调用者删除底层集合里面的元素，这对Enumeration来说是不可能的。

17.HashMap
hashmap是一个key-value键值对的数据结构，jdk1.8加了红黑树使用数组+链表+红黑树的形式内部实现的，hashmap数组的默认初始长度是16，hashmap数组只允许一个key为null，允许多个value为null。使用链地址法解决hash冲突。
hashCode()和equals()方法来向集合/从集合添加和检索元素，确定键值对的索引。hashCode()用来定位要存放的位置，equal()用来判断是否相等。
put的过程是首先判断table[i]位置，是否为空，为空，直接插入，不为空判断和当前值是否相等，相等就覆盖，如果不相等的话，判断是否是红黑树节点，如果不是，就从table[i]位置开始遍历链表，相等覆盖，不相等插入。
HashMap和Hashtable的区别：
1、HashMap是非线程安全的，HashTable是线程安全的。

2、HashMap的键和值都允许有null值存在，而HashTable则不行。

3、因为线程安全的问题，HashMap效率比HashTable的要高。
4、Hashtable是同步的，而HashMap不是。因此，HashMap更适合于单线程环境，而Hashtable适合于多线程环境。

    一般现在不建议用HashTable, ①是HashTable是遗留类，内部实现很多没优化和冗余。②即使在多线程环境下，现在也有同步的ConcurrentHashMap替代，没有必要因为是多线程而用HashTable。HashMap提供了可供应用迭代的键的集合，Hashtable提供了对键的列举(Enumeration)。

18.Array和ArrayList，LinkedList
Array可以包含基本类型和对象类型，ArrayList只能包含对象类型。Array大小是固定的，ArrayList的大小是动态变化的，如果空间不够，它会创建一个空间比原空间大50%的新数组，然后将所有元素复制到新数组中，接着抛弃旧数组。而且，每次添加新的元素的时候都会检查内部数组的空间是否足够。ArrayList提供了更多的方法和特性，比如：addAll()，removeAll()，iterator()等等。对于基本类型数据，集合使用自动装箱来减少编码工作量。但是，当处理固定大小的基本数据类型的时候，这种方式相对比较慢。
ArrayList是基于索引的数据接口，它的底层是数组。它可以以O(1)时间复杂度对元素进行随机访问。与此对应，LinkedList是以元素列表的形式存储它的数据，每一个元素都和它的前一个和后一个元素链接在一起，在这种情况下，查找某个元素的时间复杂度是O(n)。相对于ArrayList，LinkedList的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引。LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。

19.Comparable和Comparator接口
都是用来实现集合中元素的比较、排序， Comparable 是在集合内部定义的方法实现的排序，提供compareTo()。Comparator 是在集合外部实现的排序，提供compare()和equals()。Comparator位于包java.util下，而Comparable位于包 java.lang下。Comparator 是一个专用的比较器，满足策略模式，就是不改变对象自身，而用一个策略对象来改变它的行为。

20.优先级队列(Priority Queue)
PriorityQueue是一个基于优先级堆的无界队列，它的元素是按照自然顺序排序的。无论何时调用remove方法，总会获得当前优先级队列中的最小元素。PriorityQueue不是线程安全的，入队和出队的时间复杂度是O(log(n))。

21.Java中垃圾回收
垃圾回收是在内存中存在没有引用的对象或超过作用域的对象时进行。目的：回收堆内存中不再使用的对象，释放资源。
System.gc()和Runtime.gc()，用来提示JVM要进行垃圾回收。但是，立即开始还是延迟进行垃圾回收是取决于JVM的。
对象的引用被置为null，垃圾收集器不会立即释放对象占用的内存，因为有些对象是可恢复的（在finalize方法中恢复引用）。只有确定了对象无法恢复引用的时候才会清除对象内存。
对象到GC Roots不可达时，在下一个垃圾回收周期中尝试回收该对象，如果该对象重写了finalize()方法，并在这个方法中成功自救(将自身赋予某个引用)，那么这个对象不会被回收。但如果这个对象没有重写finalize()方法或者已经执行过这个方法，也自救失败，该对象将会被回收。
串行(serial)GC和吞吐量(throughput)GC的区别：吞吐量收集器使用并行版本的新生代垃圾收集器，它用于中等规模和大规模数据的应用程序，多线程。而串行收集器对大多数的小应用(在现代处理器上需要大概100M左右的内存)就足够了，单线程。

22.finalize()方法和析构函数(finalization)
垃圾回收器(garbage collector)决定回收某对象时，就会运行该对象的finalize()方法。最主要的用途是回收特殊渠道申请的内存，JNI(Java Native Interface)调用non-Java程序（C或C++），finalize()的工作就是回收这部分的内存。
finalization的目的：对象逃脱死亡的最后一次机会。（只要重新与引用链上的任何一个对象建立关联即可。）但是不建议使用，运行代价高昂，不确定性大，且无法保证各个对象的调用顺序。可用try-finally或其他替代。
finally作为异常处理的一部分，只能用在try/catch语句快中，finally代码块中的语句一定会被执行，经常被用来释放资源，如IO流和数据库资源的释放。
finalize是Object类的一个方法，该方法在Object类中声明：protected void finalize() throws Throwable { }在垃圾回收器执行时会调用被回收对象的finalize()方法，可以覆盖此方法来实现对其资源的回收。注意：一旦垃圾回收器准备释放某个对象占用的空间，将首先调该对象的
finalize()方法，并且在下一次垃圾回收动作发生时，才真正将该对象占用的内存回收。

23.Java堆的结构，堆中的持久代
JVM的堆是运行时数据区，所有类的实例和数组都是在堆上分配内存。它在JVM启动的时候被创建。
堆内存是由存活和死亡的对象组成的。存活的对象是应用可以访问的，不会被垃圾回收。死亡的对象是应用不可访问尚且还没有被垃圾收集器回收掉的对象。一直到垃圾收集器把这些对象回收掉之前，他们会一直占据堆内存空间。

持久代：用于存放静态文件，如今Java类、方法等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类。


永久代的垃圾回收主要包括类型的卸载和废弃常量池的回收。当没有对象引用一个常量的时候，该常量即可以被回收。而类型的卸载更加复杂。必须满足一下三点，该类型的所有实例都被回收了，该类型的ClassLoader被回收了，该类型对应的java.lang.Class没有在任何地方被引用，在任何地方都无法通过反射来实例化一个对象
Java8中已经移除了持久代，新加了一个叫做元数据区的native内存区。因为永久代很容易发生内存泄漏，元数据区不会遇到永久代存在的内存溢出错误，也不会出现泄漏的数据移到交换区这样的事情。

24.受检查的(checked)异常和不受检查的(unchecked)异常


运行时异常都是RuntimeException类及其子类,如 NullPointerException、IndexOutOfBoundsException等, 这些异常是不检查的异常, 是在程序运行的时候可能会发生的, 所以程序可以捕捉, 也可以不捕捉. 这些错误一般是由程序的逻辑错误引起的, 程序应该从逻辑角度去尽量避免.不受检查的异常可以传播到方法或者是构造函数的外面
检查异常是运行时异常以外的异常, 也是Exception及其子类, 这些异常从程序的角度来说是必须经过捕捉检查处理的, 否则不能通过编译. 如IOException、SQLException等。
Exception和Error都是Throwable的子类。

Error类一般是指与虚拟机相关的问题，如系统崩溃，虚拟机错误，内存空间不足，方法调用栈溢等。对于这类错误的导致的应用程序中断，仅靠程序本身无法恢复和和预防，遇到这样的错误，建议让程序终止。

Exception类表示程序可以处理的异常，可以捕获且可能恢复。遇到这类异常，应该尽可能处理异常，使程序恢复运行，而不应该随意终止异常。
异常处理完成以后，Exception对象会在下一个垃圾回收过程中被回收掉。

25.throw和throws有什么区别？
1、Throw用于方法内部，Throws用于方法声明上
2、Throw后跟异常对象，Throws后跟异常类型
3、Throw后只能跟一个异常对象，Throws后可以一次声明多种异常类型

26.什么是Applet？
Java应用小程序，可以直接嵌入到网页中，并能够产生特殊的效果，applet经编译后会产生.class文件，把.class文件嵌入到html页面中，用户在链接网页时，applet便会伴随网页一起下载到用户计算机运行。
applet主要用来创建动态交互的web应用程序。
Java Applet程序不能单独运行，它必须依附于一个用HTML语言编写的网页并嵌入其中，通过与Java兼容的浏览器来控制执行，必须通过网络浏览器或者Applet观察器才能执行。可以直接利用浏览器或AppletViewer提供的图形用户界面。Java Applet 对站点的磁盘文件既不能进行读操作，也不能进行写操作。


由于 Applet的引入，使Web页面具有动态多媒体效果和可交互性能，这使由名为超文本、实为纯文本的HTML语言编写成的Web页面真正具有了超文本功能，不但可以显示文本信息，而且还可以有各种图片效果和动态图形效果，从而使页面显得生动美丽；另外，Applet使Web页面增加了按钮等功能，从而增加了交互性。
applet是运行在启用了java的浏览器中，需要有Java虚拟机。Java applet不需要main这样的函数来开始执行。Java applet一般会使用很严格的安全策略。
applet安全管理器是给applet施加限制条件的一种机制。浏览器可以只有一个安全管理器。安全管理器在启动的时候被创建，之后不能被替换覆盖或者是扩展。安全管理器的作用在于，用户在执行某个操作时，调用安全管理器来进行check，有此权限则通过，没有则抛异常。一旦某个类被加载到虚拟机中，并由检验器检查过之后，Java平台的第二种安全机制就会启动，这个机制就是安全管理器。安全管理器是一个负责控制某个操作是否允许执行的类。
由于安全的限制条件：
applet不能够载入类库或者定义本地方法。
applet不能在宿主机上读写文件。
applet不能读取特定的系统属性。
applet不能发起网络连接，除非是跟宿主机。
applet不能够开启宿主机上其他任何的程序。
不受信任的applet是不能访问或是执行本地系统文件的Java applet，默认情况下，所有下载的applet都是不受信任的。
Applet的生命周期：
Init：每次被载入的时候都会被初始化。
Start：开始执行applet。
Stop：结束执行applet。
Destroy：卸载applet之前，做最后的清理工作。
paint： 在 start() 方法之后被立即调用，或是在 applet 需要在浏览器上重现它自身的任何时候。paint() 方法实际上是继承自 java.awt。
当applet被载入的时候：首先，创建applet控制类的实例，然后初始化applet，最后开始运行。
当applet是从网络上加载的时候，applet是由applet类加载器载入的，它受applet安全管理器的限制。类加载器有自己的java名称空间等级结构。类加载器会保证来自文件系统的类有唯一的名称空间，来自网络资源的类有唯一的名称空间。applet的类被放置于和applet的源相关联的私有的名称空间中。然后，那些被类加载器载入进来的类都是通过了验证器验证的。验证器会检查类文件格式是否遵守Java语言规范，确保不会出现堆栈溢出(stack overflow)或者下溢(underflow)，传递给字节码指令的参数是正确的。
当applet是从客户端的本地磁盘载入的时候，applet是由文件系统加载器载入的。
从文件系统载入的applet允许在客户端读文件，写文件，加载类库，并且也允许执行其他程序，但是，却通不过字节码校验。

27.哪些Swing的方法是线程安全的？


Swing的规则是：一旦Swing组件被具现化（realized），所有可能影响或依赖于组件状态的代码都应该在事件派发线程中执行。所以有这3个线程安全的方法：repaint()，revalidate()，andinvalidate()。
Java使用布局管理器以一种一致的方式在所有的窗口平台上摆放组件。因为布局管理器不会和组件的绝对大小和位置相绑定，所以他们能够适应跨窗口系统的特定平台的不同。
Java中的Swing组件使用了MVC（模型-视图-控制器)设计模式。

28.事件监听器接口(event-listener interface)和事件适配器(event-adapter)有什么关系？
事件监听器接口定义了对特定的事件，事件处理器必须要实现的方法。事件适配器给事件监听器接口提供了默认的实现。
GUI组件可以处理它自己的事件，只要它实现相对应的事件监听器接口，并且把自己作为事件监听器。

29.JDBC
JDBC（Java DataBase Connectivity）,是一套面向对象的应用程序接口（API），制定了统一的访问各类关系数据库的标准接口，为各个数据库厂商提供了标准的实现。通过JDBC技术，开发人员可以用纯Java语言和标准的SQL语句编写完整的数据库应用程序，并且真正地实现了软件的跨平台性。
JDBC是允许用户在不同数据库之间做选择的一个抽象层。JDBC允许开发者用JAVA写数据库应用程序，而不需要关心底层特定数据库的细节。

通常情况下使用JDBC完成以下操作：
1.同数据库建立连接；
2.向数据库发送SQL语句；
3.处理从数据库返回的结果；
在使用jdbc前，应该保证相应的Driver类已经被加载到jvm中，并且完成了类的初始化工作就行了。

30.Class.forName()方法
Class.forName()方法初始化参数指定的类，并且返回此类对应的Class 对象。


使用newInstance()方法的时候，就必须保证： 1、这个类已经加载； 2、这个类已经连接了。 而完成上面两个步骤的正是Class的静态方法forName()所完成的，这个静态方法调用了启动类加载器，即加载 java API的那个加载器。

31.PreparedStatement比Statement有什么优势？
PreparedStatements是预编译的，执行速度快。
不同的查询参数值，PreparedStatement可以重用。
PreparedStatements的代码可读性，可维护性强于statement。
极大的提高了安全性。
PreparedStatements作为statement的子类，excute,excuteQuery和excuteUpdate已被更改以使之不再需要参数。
CallableStatement用来执行存储过程。存储过程是由数据库存储和提供的。存储过程可以接受输入参数，也可以有返回结果。非常鼓励使用存储过程，因为它提供了安全性和模块化。

32.数据库连接池


数据库连接的建立、关闭资源消耗巨大。 传统数据库访问方式：一次数据访问对应一个物理连接，每次操作数据库都要打开关闭该物理连接，系统性能严重受损。 解决方案：数据库连接池。系统初始运行时，主动建立足够足够的连接，组成一个池，每次应用程序请求数据库连接时，无需重新打开连接，而是从池中取出已有的连接，使用完后，不再关闭，而是归还。

33.RMI


Java RMI（Remote Method Invocation）--Java的远程方法调用是Java所特有的分布式计算技术，它允许运行在一个Java虚拟机上的对象调用运行在另一个Java虚拟机上的对象的方法，从而使Java编程人员可以方便地在网络环境中作分布式计算。
是Java API对远程过程调用(RPC)提供的面向对象的等价形式，支持直接传输序列化的Java对象和分布式垃圾回收。远程方法调用可以看做是激活远程正在运行的对象上的方法的步骤。RMI对调用者是位置透明的，因为调用者感觉方法是执行在本地运行的对象上的。
RMI体系结构的基本原则：RMI体系结构是基于一个非常重要的行为定义和行为实现相分离的原则。RMI允许定义行为的代码和实现行为的代码相分离，并且运行在不同的JVM上。
RMI体系结构分以下几层：
存根和骨架层(Stub and Skeleton layer)：这一层对程序员是透明的，它主要负责拦截客户端发出的方法调用请求，然后把请求重定向给远程的RMI服务。
远程引用层(Remote Reference Layer)：RMI体系结构的第二层用来解析客户端对服务端远程对象的引用。这一层解析并管理客户端对服务端远程对象的引用。连接是点到点的。
传输层(Transport layer)：这一层负责连接参与服务的两个JVM。这一层是建立在网络上机器间的TCP/IP连接之上的。它提供了基本的连接服务，还有一些防火墙穿透策略。
RMI中的远程接口(Remote Interface)：用来标识哪些方法是可以被非本地虚拟机调用的接口。远程对象必须要直接或者是间接实现远程接口。实现了远程接口的类应该声明被实现的远程接口，给每一个远程对象定义构造函数，给所有远程接口的方法提供实现。
java.rmi.Naming类用来存储和获取在远程对象注册表里面的远程对象的引用。Naming类的每一个方法接收一个URL格式的String对象作为它的参数。
RMI的绑定(Binding)：绑定是为了查询找远程对象而给远程对象关联或者是注册以后会用到的名称的过程。远程对象可以使用Naming类的bind()或者rebind()方法跟名称相关联。
为了让RMI程序能正确运行必须要包含以下几个步骤：
编译所有的源文件。
使用rmic生成stub。
启动rmiregistry。
启动RMI服务器。
运行客户端程序。
远程对象的stub扮演了远程对象的代表或者代理的角色。调用者在本地stub上调用方法，它负责在远程对象上执行方法。

34.Marshalling和demarshalling。
当应用程序希望把内存对象跨网络传递到另一台主机或者是持久化到存储的时候，就必须要把对象在内存里面的表示转化成合适的格式。这个过程就叫做Marshalling，反之就是demarshalling。

35.Serialization和Deserialization
Java提供了一种叫做对象序列化的机制，他把对象表示成一连串的字节，里面包含了对象的数据，对象的类型信息，对象内部的数据的类型信息等等。因此，序列化可以看成是为了把对象存储在磁盘上或者是从磁盘上读出来并重建对象而把对象扁平化的一种方式。反序列化是把对象从扁平状态转化成活动对象的相反的步骤。
序列化是将对象变成字节流，存储到磁盘或网络。

36.doGet()方法和doPost()方法有什么区别？
doGet：路径传参。效率高，安全性差
doPOST：实体传参。效率低，安全性好
get是从服务器上获取数据，post是向服务器传送数据。 get传送的数据量较小，post传送的数据量较大。在做数据查询时，建议用Get方式；而在做数据添加、修改或删除时，建议用Post方式

37.session和cookie有什么区别？
cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户的状态，就使用response向客户端浏览器颁发一个cookie。客户端浏览器会把cookie保存起来。当浏览器再次请求该网站时，浏览器就会把请求地址和cookie一同给服务器。服务器检查该cookie，从而判断用户的状态。服务器还可以根据需要修改cookie的内容。 session是另一种记录客户状态的机制。不同的是cookie保存在客户端浏览器中，而session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是session。客户端浏览器再次访问时只需要从该session中查找该客户的状态就可以了。 如果说cookie机制是通过检查客户身上的“通信证”，那么session机制就是通过检查服务器上的“客户明细表”来确认客户身份。
客户端可以选择禁用cookie，但是，session仍然是能够工作的，因为客户端无法禁用服务端的session。
session能够存储任意的Java对象，cookie只能存储String类型的对象。

38.面向对象软件开发的优点有哪些？
代码开发模块化，更易维护和修改。
代码复用。
增强代码的可靠性和灵活性。
增加代码的可理解性。
面向对象编程有很多重要的特性，比如：封装，继承，多态和抽象。

39.封装
封装给对象提供了隐藏内部特性和行为的能力。封装就是将属性私有化，提供公有的方法访问私有属性。
通过隐藏对象的属性来保护对象内部的状态。
提高了代码的可用性和可维护性，因为对象的行为可以被单独的改变或者是扩展。
禁止对象之间的不良交互提高模块化。

40.多态
多态：相同类型的引用变量，调用同一个方法时呈现出多种不同的行为特征。
对象的实例变量不具备多态性。
Java引用变量有两个类型：编译时类型，运行时类型
编译时类型由声明该变量时使用的类型决定
运行时类型由实际赋给该变量的对象决定
如果编译时类型和运行时类型不一致，就可能出现多态。

41.继承
继承是一种类与类之间的关系，利用一个已经存在的类，快速的创建新的类的机制。
继承给对象提供了从基类获取字段和方法的能力。继承提供了代码的重用性，也可以在不修改类的情况下给现存的类添加新特性。

42.抽象
抽象是把想法从具体的实例中分离出来的步骤，因此，要根据他们的功能而不是实现细节来创建类。Java支持创建只暴漏接口而不包含方法实现的抽象的类。这种抽象技术的主要目的是把类的行为和实现细节分离开。
抽象和封装是互补的概念。一方面，抽象关注对象的行为。另一方面，封装关注对象行为的细节。一般是通过隐藏对象内部状态信息做到封装，因此，封装可以看成是用来提供抽象的一种策略。

43.静态代理和动态代理
静态代理：
优点：可以做到不对目标对象进行修改的前提下，对目标对象进行功能的扩展和拦截。
缺点：因为代理对象，需要实现与目标对象一样的接口，接口与代理类是1对1的，会导致代理类十分繁多，不易维护，同时一旦接口增加方法，则目标对象和代理类都需要维护。

动态代理：使用了反射
优点：代理对象无需实现接口，免去了编写很多代理类的烦恼，同时接口增加方法也无需再维护目标对象和代理对象，只需在事件处理器中添加对方法的判断即可。
缺点：代理对象不需要实现接口，但是目标对象一定要实现接口，否则无法使用JDK动态代理。
