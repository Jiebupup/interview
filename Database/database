1.sql查询
DISTINCT：相同值只会出现一次，所有列的值都相同才算相同。
LIMIT：限制返回的行数。
SELECT，FROM
WHERE过滤行：AND 和 OR 用于连接多个过滤条件，IN匹配一组值或子查询，NOT否定。
GROUP BY分组：HAVING 过滤分组，行过滤应当先于分组过滤。
ORDER BY排序：升序ASC（默认），降序DESC。可以按多个列进行排序，并且为每个列指定不同的排序方式。

函数（针对某一列）：
计算：AVG()，COUNT()行数，MAX()，MIN()，SUM()。
文本处理
日期和时间处理
数值处理

子查询
组合查询UNION

连接查询：用于连接多个表，使用JOIN+ON
连接可以替换子查询，并且比子查询的效率一般会更快。
用 AS 给列名、计算字段和表名取别名。

内连接INNER JOIN：又称等值连接，使用普通查询并在 WHERE 中将两个表中要连接的列用等值方法连接起来来代替。
左连接LEFT JOIN：左表的记录将会全部表示出来，而右表只会显示符合搜索条件的记录。右表记录不足的地方均为NULL。
右连接
自连接：可以看成内连接的一种。
自然连接：把同名列通过等值测试连接起来。内连接和自然连接的区别：内连接提供连接的列，而自然连接自动连接所有同名列。
外连接：保留了没有关联的那些行。分为左外连接，右外连接以及全外连接。

DELETE、TRUNCATE 和 DROP
DELETE 删除表中 WHERE 语句指定的数据。
TRUNCATE 清空表，相当于删除表中的所有数据。
DROP 删除表结构。

区别：
事务：DELETE 会被放到日志中以便进行回滚。TRUNCATE 和 DROP 立即生效，不会放到日志中，也就不支持回滚。
删除空间：DELETE 不会减少表和索引占用的空间。TRUNCATE 会将表和索引占用的空间恢复到初始值。DROP 会将表和索引占用的空间释放。
耗时：通常来说，DELETE < TRUNCATE < DROP。

2.其他
主键的值不允许修改，也不允许复用（不能将已经删除的主键值赋给新数据行的主键）。

表table：CRUD创建，读取，更新，删除。

视图VIEW：虚拟的表，本身不包含数据，也就不能对其进行索引操作。数据都存储在原始表中。
视图具有如下好处：
简化复杂的 SQL 操作，比如复杂的连接；
只使用实际表的一部分数据；
通过只给用户访问视图的权限，保证数据的安全性；
更改数据格式和表示。

因为视图不存储数据，所以更新视图需要去更新原始表。如果视图定义只依赖于一个原始表，就很容易进行更新操作。
但如果视图定义中有以下操作，那么就不能进行视图的更新：分组查询、连接查询、子查询、Union、聚集函数、DISTINCT、计算字段。

游标：在存储过程中使用游标可以对一个结果集进行移动遍历。
使用游标的四个步骤：
声明游标，这个过程没有实际检索出数据；
打开游标；
取出数据；
关闭游标；

触发器：会在执行DELETE、INSERT、UPDATE语句时而自动执行。

3.关系数据库设计理论
函数依赖
异常

范式：高级别范式的依赖于低级别的范式
1NF：属性不可分。
2NF：每个非主属性完全函数依赖于键码。可以通过分解来满足。
3NF：非主属性不传递函数依赖于键码。

ER 图：实体、属性、联系

4.事务
数据库管理系统执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。

ACID
原子性Atomicity：事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚（回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可）。
一致性Consistency：数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的。
隔离性Isolation：一个事务所做的修改在最终提交以前，对其它事务是不可见的。
持久性Durability：一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。可以使用重做日志来保证持久性。

在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。
在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。

回退（rollback）指撤销指定 SQL 语句的过程；不能回退 SELECT、CREATE 和 DROP 语句。
提交（commit）指将未存储的 SQL 语句结果写入数据库表；
保留点（savepoint）指事务处理中设置的临时占位符（placeholder），你可以对它发布回退（与回退整个事务处理不同）。

MySQL 默认采用自动提交模式AUTOCOMMIT：每执行一条语句就把这条语句当成一个事务然后进行提交。
当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。
设置 autocommit 为 0 可以取消自动提交；autocommit 标记是针对每个连接而不是针对服务器的。
如果没有设置保留点，ROLLBACK 会回退到 START TRANSACTION 语句处；如果设置了保留点，并且在 ROLLBACK 中指定该保留点，则会回退到该保留点。

5.sql注入攻击
服务器上的数据库运行非法的 SQL 语句，主要通过拼接来完成。访问用户通过网站前端对网站可以输入参数的地方进行提交参数，参数里插入了一些恶意参数传入到服务器后端，执行了数据库的sql语句并访问敏感信息。                         
过程：
strSQL = "SELECT * FROM users WHERE (name = '" + userName + "') and (pw = '"+ passWord +"');"
userName = "1' OR '1'='1";
passWord = "1' OR '1'='1";
strSQL = "SELECT * FROM users WHERE (name = '1' OR '1'='1') and (pw = '1' OR '1'='1');"
无需验证通过就能执行查询：strSQL = "SELECT * FROM users;"

防止手段： 
使用参数化查询：Java 中的 PreparedStatement 是预先编译的 SQL 语句，可以传入适当参数并且多次执行。由于没有拼接的过程，因此可以防止 SQL 注入的发生。sql注入只对sql语句的编译过程有破坏作用。
单引号转换：将传入的参数中的单引号转换为连续两个单引号，PHP 中的 Magic quote 可以完成这个功能。转化成一些其他符号导致sql语句无法执行。
正则表达式过滤传入的参数
