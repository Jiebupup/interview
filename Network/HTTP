1.HTTP方法
GET：获取资源
POST：传输数据
PUT：不带验证机制，任何人都可以上传文件，因此存在安全性问题。
DELETE：与PUT对应
HEAD：获取报文首部，主要用于确认 URL 的有效性以及资源更新的日期时间等。

两者区别：
GET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在实体主体中。
GET 方法是安全的，而 POST 却不是。
GET 是幂等的，连续调用多次，客户端接收到的结果都是一样的。POST 不是，如果调用多次，就会增加多行记录。
GET 可缓存，POST 在多数情况下不可缓存。
在使用 XMLHttpRequest 的 GET 方法时浏览器将会把 Header 和 Data 一起发送。 而POST 方法，浏览器会先发送 Header 再发送 Data。但并不是所有浏览器会这么做，例如火狐。

2.HTTP状态码
1XX：Informational（信息性状态码），接收的请求正在处理

2XX：Success（成功状态码），请求正常处理完毕

3XX：Redirection（重定向状态码），需要进行附加操作以完成请求

4XX：Client Error（客户端错误状态码），服务器无法处理请求

5XX，Server Error（服务器错误状态码），服务器处理请求出错

3.应用
短连接与长连接：
长连接只需要建立一次 TCP 连接就能进行多次 HTTP 通信。
从 HTTP/1.1 开始默认是长连接的，如果要断开连接，需要由客户端或者服务器端提出断开，使用 Connection : close；
在 HTTP/1.1 之前默认是短连接的，如果需要使用长连接，则使用 Connection : Keep-Alive。

流水线：是在同一条长连接上连续发出请求，而不用等待响应返回，这样可以减少延迟。

HTTP 协议是无状态的，主要是为了让 HTTP 协议尽可能简单，使得它能够处理大量事务。HTTP/1.1 引入 Cookie 来保存状态信息。
Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器之后向同一服务器再次发起请求时被携带上，用于告知服务端两个请求是否来自同一浏览器。
用途：会话状态管理，个性化设置，浏览器行为跟踪。

Session 将用户信息存储在服务器端，存储在服务器端的信息更加安全。Session 可以存储在服务器上的文件、数据库或者内存中。也可以将 Session 存储在 Redis 这种内存型数据库中，效率会更高。

Cookie 只能存储 ASCII 码字符串，而 Session 则可以存储任何类型的数据，因此在考虑数据复杂性时首选 Session。
浏览器可以禁用 Cookie，此时只能使用 Session来保存用户信息。

缓存

代理

4.HTTPS
HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信，也就是说 HTTPS 使用了隧道进行通信。
通过使用 SSL，HTTPS 具有了加密（防窃听）、认证（防伪装）和完整性保护（防篡改）。

5.HTTP/2.0
HTTP/1.x 缺陷：实现简单是以牺牲性能为代价的：
客户端需要使用多个连接才能实现并发和缩短延迟；
不会压缩请求和响应首部，从而导致不必要的网络流量；
不支持有效的资源优先级，致使底层 TCP 连接的利用率低下。

HTTP/2.0采用的技术：
二进制分帧层，服务端推送，首部压缩

HTTP/1.1 新特性：
默认是长连接
支持流水线
支持同时打开多个 TCP 连接
支持虚拟主机
新增状态码 100
支持分块传输编码
新增缓存处理指令 max-age
