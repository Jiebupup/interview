1.索引
B+ Tree：所有叶子节点位于同一层，顺序访问指针来提高区间查询的性能。文件系统及数据库系统普遍采用 B+ Tree 作为索引结构。
优势：更少的查找次数（出度大），利用磁盘预读特性。
是大多数 MySQL 存储引擎的默认索引类型。
不再需要进行全表扫描，只需要对树进行搜索即可，所以查找速度快很多。
因为 B+ Tree 的有序性，所以除了用于查找，还可以用于排序和分组。
InnoDB 的 B+Tree 索引分为主索引和辅助索引。这种索引方式被称为聚簇索引。一个表只能有一个聚簇索引。

索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。
还有哈希索引，全文索引，空间数据索引，

索引优化：独立的列，多列索引，索引列的顺序，前缀索引，覆盖索引

优点：
大大减少了服务器需要扫描的数据行数。
帮助服务器避免进行排序和分组，以及避免创建临时表（B+Tree 索引是有序的，可以用于 ORDER BY 和 GROUP BY 操作。临时表主要是在排序和分组过程中创建，因为不需要排序和分组，也就不需要创建临时表）。
将随机 I/O 变为顺序 I/O（B+Tree 索引是有序的，会将相邻的数据都存储在一起）。

使用条件：对于中到大型的表，索引就非常有效；对于特大型的表，建立和维护索引的代价将会随之增长。这种情况下，需要用到一种技术可以直接区分出需要查询的一组数据，而不是一条记录一条记录地匹配（使用分区技术）。

2.查询性能优化
Explain ：用来分析 SELECT 查询语句
优化数据访问
重构查询方式

3.存储引擎
InnoDB：MySQL 默认的事务型存储引擎，可以使用 Commit 和 Rollback 语句。支持行级锁，外键和在线热备份。
MyISAM：多了支持压缩表和空间数据索引。只支持表级锁。崩溃后发生损坏的概率比 InnoDB 高很多，而且恢复的速度也更慢。

4.数据类型
整型，浮点数，字符串，时间和日期

5.切分
水平切分Sharding：将同一个表中的记录按行拆分到多个结构相同的表中。
垂直切分：将一张表按列切分成多个表
Sharding 策略
Sharding 存在的问题：事务问题，连接，ID 唯一性

6.复制
主从复制：涉及binlog 线程、I/O 线程和 SQL 线程。
读写分离：主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。
