1.简介
Nginx 是异步框架的网页服务器，也可以用作反向代理、负载平衡器和 HTTP 缓存。2004 年首次公开发布。Nginx 是免费的开源软件，根据类 BSD 许可证的条款发布。一大部分 Web 服务器使用 Nginx，通常作为负载均衡器。
Nginx 同 Apache 一样都是一种 Web 服务器。基于 REST 架构风格，以统一资源描述符 URI 或者统一资源定位符 URL 作为沟通依据，通过 HTTP 协议提供各种网络服务。
轻量级高并发服务器 Nginx，C 语言开发。
Nginx 是一款自由的、开源的、高性能的 HTTP 服务器和反向代理服务器；同时也是一个 IMAP、POP3、SMTP 代理服务器。Nginx 可以作为一个 HTTP 服务器进行网站的发布处理，另外 Nginx 可以作为反向代理进行负载均衡的实现。

2.特点
Nginx 使用基于事件驱动架构，使得其可以支持数以百万级别的 TCP 连接。
高度的模块化和自由软件许可证使得第三方模块层出不穷（开源）。
Nginx 是一个跨平台服务器，可以运行在 Linux、Windows、FreeBSD、Solaris、AIX、Mac OS 等操作系统上。
这些优秀的设计带来的极大的稳定性。

3.反向代理
客户端->代理->服务器
反向代理服务器位于用户与目标服务器之间，但是对于用户而言，反向代理服务器就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源。
同时，用户不需要知道目标服务器的地址，也无须在用户端作任何设定。
反向代理服务器通常可用来作为 Web 加速，即使用反向代理作为 Web 服务器的前置机来降低网络和服务器的负载，提高访问效率。
多台服务器，客户端是无感知代理的存在的，反向代理对外都是透明的，访问者并不知道自己访问的是一个代理。因为客户端不需要任何配置就可以访问。
代理的是服务端。

反向代理的作用：
保证内网的安全，通常将反向代理作为公网访问地址，Web 服务器是内网。
负载均衡，通过反向代理服务器来优化网站的负载。

正向代理：客户端和正向代理同属于一个环境。
客户端必须要进行一些特别的设置才能使用正向代理。

正向代理的用途：
访问原来无法访问的资源。
可以做缓存，加速访问资源。
对客户端访问授权，上网进行认证。
代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息。

通常情况下，我们在实际项目操作时，正向代理和反向代理很有可能会存在同一个应用场景中。

4.负载均衡
Nginx 负载均衡是通过 upstream 模块来实现的。
weight 轮循（默认）：接收到的请求按照顺序逐一分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx 会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。
这种方式下，可以给不同的后端服务器设置一个权重值 weight，用于调整不同的服务器上请求的分配率。权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。

ip_hash：每个请求按照发起客户端的 IP 的 hash 结果进行匹配，这样的算法下一个固定 IP 地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下 Session 共享的问题。
fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配。响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少，它是结合了前两者的优点的一种调度算法。
url_hash：按照访问的 URL 的 hash 结果分配请求，每个请求的 URL 会指向后端固定的某个服务器，可以在 Nginx 作为静态服务器的情况下提高缓存效率。

fair 和 url_hash 属于第三方负载策略，使用需安装模块和软件包。

最少连接：将请求分配给连接数最少的服务器。Nginx 会统计哪些服务器的连接数最少。

Nginx 实现限流：连接数限流模块 ngx_http_limit_conn_module 和漏桶算法实现的请求限流模块 ngx_http_limit_req_module。

负载均衡在实际项目操作过程中，有硬件负载均衡和软件负载均衡两种，硬件负载均衡也称为硬负载，如 F5 负载均衡，相对造价昂贵成本较高，但是数据的稳定性安全性等等有非常好的保障。

5.Apache
Apache 的发展时期很长，而且是毫无争议的世界第一大服务器。它有着很多优点：稳定、开源、跨平台等等。
它出现的时间太长了，它兴起的年代，互联网产业远远比不上现在。所以它被设计为一个重量级的。
它不支持高并发的服务器。在 Apache 上运行数以万计的并发访问，会导致服务器消耗大量内存。
操作系统对其进行进程或线程间的切换也消耗了大量的 CPU 资源，导致 HTTP 请求的平均响应速度降低。
这些都决定了 Apache 不可能成为高性能 Web 服务器。
